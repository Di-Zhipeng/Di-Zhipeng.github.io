<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>黑白棋AI</title>
      <link href="/article/3a5ee2c4.html"/>
      <url>/article/3a5ee2c4.html</url>
      
        <content type="html"><![CDATA[<h1 id="搜索-黑白棋-AI-算法"><a href="#搜索-黑白棋-AI-算法" class="headerlink" title="搜索 - 黑白棋 AI 算法"></a>搜索 - 黑白棋 AI 算法</h1><h3 id="一、实验背景"><a href="#一、实验背景" class="headerlink" title="一、实验背景"></a>一、实验背景</h3><p>黑白棋 (Reversi)，也叫苹果棋，翻转棋，是一个经典的策略性游戏。</p><p>一般棋子双面为黑白两色，故称“黑白棋”。因为行棋之时将对方棋子翻转，则变为己方棋子，故又称“翻转棋” (Reversi) 。<br>棋子双面为红、绿色的称为“苹果棋”。它使用 8x8 的棋盘，由两人执黑子和白子轮流下棋，最后子多方为胜方。<br>随着网络的普及，黑白棋作为一种最适合在网上玩的棋类游戏正在逐渐流行起来。<br>中国主要的黑白棋游戏站点有 Yahoo 游戏、中国游戏网、联众游戏等。</p><p><img src="https://i.loli.net/2020/05/11/guxw1MEXv2maZ47.jpg" alt="img"></p><h3 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h3><h4 id="1-Mo平台"><a href="#1-Mo平台" class="headerlink" title="1. Mo平台"></a>1. Mo平台</h4><p>Mo平台是一个人工智能平台，它允许初学者进行搭积木式的线上模型开发以及离线训练和简单部署，还可以进行多人协作共同开发和交互式在线学习，近期，Mo平台迁回浙大校内，得到了信息技术中心的大力支持，成为了ZJU AI课上必不可少的关键平台。</p><p><img src="https://i.loli.net/2020/05/11/bLfYPtMG4mWcizE.png" alt="image-20200429100417669"></p><h4 id="2-本机"><a href="#2-本机" class="headerlink" title="2. 本机"></a>2. 本机</h4><p>操作系统：Arch-Linux</p><p>CPU：Intel(R) CORE i7-8650U @ 1.9GHz</p><p>RAM: 16GB LPDDR3</p><p>Python版本：Python3.9</p><p>开发工具：PyCharm</p><h3 id="三、核心算法"><a href="#三、核心算法" class="headerlink" title="三、核心算法"></a>三、核心算法</h3><h4 id="1-Min-Max-算法"><a href="#1-Min-Max-算法" class="headerlink" title="1. Min-Max 算法"></a>1. Min-Max 算法</h4><p>在二人博弈问题中，为了从众多可供选择的行动方案中选出一个对自己最为有利的行动方案，就需要对当前的情况以及将要发生的情况进行分析，通过某搜索算法从中选出最优的走步。</p><p>基本想法是：</p><ol><li>设博弈的双方中一方为MAX，另一方为MIN。然后为其中的一方寻找一个最优行动方案。</li><li>为了找到当前的最优行动方案，需要对各个可能的方案所产生的后果进行比较,具体地说，就是要考虑每一方案实施后对方可能采取的所有行动，并计算可能的得分。</li><li>为计算得分，需要根据问题的特性信息定义一个评估函数，用来估算当前博弈树端节点的得分。此时估算出来的得分称为静态估值。</li><li>当端节点的估值计算出来后，再推算出父节点的得分，推算的方法是：对“或”节点，选其子节点中一个最大的得分作为父节点的得分，这是为了使自己在可供选择的方案中选一个对自己最有利的方案；对“与”节点，选其子节点中一个最小的得分作为父节点的得分，这是为了立足于最坏的情况。这样计算出的父节点的得分称为倒推值。</li><li>如果一个行动方案能获得较大的倒推值，则它就是当前最好的行动方案</li></ol><p><img src="https://i.loli.net/2020/05/11/YK4I1hdDum35pUc.png" alt="img"></p><p>下面是伪代码描述：</p><pre class="line-numbers language-C"><code class="language-C">function minimax(node, depth)    if node is a terminal node or depth = 0        return the heuristic value of node    if the adversary is to play at node        let α := +∞        foreach child of node            α := min(α, minimax(child, depth-1))    else {we are to play at node}        let α := -∞        foreach child of node            α := max(α, minimax(child, depth-1))    return α<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Alpha-Beta剪枝算法"><a href="#2-Alpha-Beta剪枝算法" class="headerlink" title="2. Alpha-Beta剪枝算法"></a>2. Alpha-Beta剪枝算法</h4><p>​    <strong>Alpha-beta剪枝</strong>是一种搜索算法，用以减少极小化极大算法（Minimax算法）搜索树的节点数。这是一种对抗性搜索算法，主要应用于机器游玩的二人游戏。</p><p>Alpha-beta的优点是减少搜索树的分枝，将搜索时间用在“更有希望”的子树上，继而提升搜索深度。该算法和极小化极大算法一样，都是分支限界类算法。若节点搜索顺序达到最优化或近似最优化（将最佳选择排在各节点首位），则同样时间内搜索深度可达极小化极大算法的两倍多。</p><p>算法使用两个值alpha和beta，分别代表大分玩家放心的最高分，以及小分玩家放心的最低分。alpha和beta的初始值分别为正负无穷大，即双玩家都以可能的最低分开始游戏。在选择某节点的特定分枝后，可能发生小分玩家放心的最小分小于大分玩家放心的最大分（beta &lt;= alpha）。这种情况下，父节点不应选择这个节点，否则父节点分数会降低，因此该分枝的其他节点没有必要继续探索。</p><p><img src="https://i.loli.net/2020/05/11/gLiV4jG9KBWxUAN.png" alt="img"></p><pre class="line-numbers language-c"><code class="language-c">function <span class="token function">alphabeta</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> α<span class="token punctuation">,</span> β<span class="token punctuation">,</span> maximizingPlayer<span class="token punctuation">)</span> is    <span class="token keyword">if</span> depth <span class="token operator">=</span> <span class="token number">0</span> or node is a terminal node then        <span class="token keyword">return</span> the heuristic value of node    <span class="token keyword">if</span> maximizingPlayer then        value <span class="token punctuation">:</span><span class="token operator">=</span> −∞        <span class="token keyword">for</span> each child of node <span class="token keyword">do</span>            value <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token function">alphabeta</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> depth − <span class="token number">1</span><span class="token punctuation">,</span> α<span class="token punctuation">,</span> β<span class="token punctuation">,</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">)</span>            α <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>α<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token keyword">if</span> α ≥ β then                <span class="token keyword">break</span> <span class="token punctuation">(</span><span class="token operator">*</span> β cut<span class="token operator">-</span>off <span class="token operator">*</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value    <span class="token keyword">else</span>        value <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token operator">+</span>∞        <span class="token keyword">for</span> each child of node <span class="token keyword">do</span>            value <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token function">alphabeta</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> depth − <span class="token number">1</span><span class="token punctuation">,</span> α<span class="token punctuation">,</span> β<span class="token punctuation">,</span> TRUE<span class="token punctuation">)</span><span class="token punctuation">)</span>            β <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>β<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token keyword">if</span> α ≥ β then                <span class="token keyword">break</span> <span class="token punctuation">(</span><span class="token operator">*</span> α cut<span class="token operator">-</span>off <span class="token operator">*</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-遗传算法"><a href="#3-遗传算法" class="headerlink" title="3. 遗传算法"></a>3. 遗传算法</h4><p><strong>遗传算法</strong>是计算数学中用于解决最优化的搜索算法，是进化算法的一种。进化算法最初是借鉴了进化生物学中的一些现象而发展起来的，这些现象包括遗传、突变、自然选择以及杂交等。</p><p>遗传算法通常实现方式为一种计算机模拟。对于一个最优化问题，一定数量的候选解（称为个体）可抽象表示为染色体，使种群向更好的解进化。传统上，解用二进制表示（即0和1的串），但也可以用其他表示方法。进化从完全随机个体的种群开始，之后一代一代发生。在每一代中评价整个种群的适应度，从当前种群中随机地选择多个个体（基于它们的适应度），通过自然选择和突变产生新的生命种群，该种群在算法的下一次迭代中成为当前种群。</p><p>本次实验使用遗传算法主要是为了训练评估函数中各个子评估函数的权重</p><h3 id="四、评估函数"><a href="#四、评估函数" class="headerlink" title="四、评估函数"></a>四、评估函数</h3><p>我的评估函数由行动力、前沿子、棋子数目、地势、稳定性、占角、奇偶七个方面组成</p><h4 id="1-行动力"><a href="#1-行动力" class="headerlink" title="1. 行动力"></a>1. 行动力</h4><p>基于这样的假设: 在某局面中, 选择多, 则灵活主动, 而选择少, 则往往陷入被动。因此选择多少, 就成为了评估局面好坏的参考因素了。于是我们把面对某一局面, 可以落子的个数, 称之为行动力。</p><p>如果能够减少对方行动的选择性，诱导对方下到星位，自己可以快速入角，这就是行动力策略。从黑白棋上看，我们如果能够抢到四个角，每条边8颗棋子，四条边30颗子，随便在中间占几个位置就能够胜利。所以对于黑白棋来说，即使一开始处于劣势，后期也非常容易翻盘。</p><p>行动力是评估的重要的参考依据，这里的计算方法也很简单，计算一下两个玩家合法位置list长度，然后做差并标准化就可以了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">evalMobility</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    black_mobility <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_legal_actions<span class="token punctuation">(</span>self<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">)</span>    white_mobility <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_legal_actions<span class="token punctuation">(</span>self<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>black_mobility <span class="token operator">-</span> white_mobility<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-前沿子"><a href="#2-前沿子" class="headerlink" title="2. 前沿子"></a>2. 前沿子</h4><p>所谓前沿子，就是在外部的棋子，周围有空位可以下，最好能挨着对方的棋子。这样的棋子因为周围可以下子，所以他往往具有更大的价值，因此我们要多争取这样的棋子。</p><p>我的前沿子计算，就是判断一下八个方向有没有空位：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">evalFrontier</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    black_frontier <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    white_frontier <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    direction <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>_board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    cur_position <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> direction<span class="token punctuation">[</span>k<span class="token punctuation">]</span>                    <span class="token keyword">if</span> is_on_board<span class="token punctuation">(</span>cur_position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cur_position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> \                    <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_board<span class="token punctuation">[</span>cur_position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cur_position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>empty<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>black<span class="token punctuation">:</span>                            black_frontier<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">else</span><span class="token punctuation">:</span>                                white_frontier<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>                                black_frontier <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>black_frontier<span class="token punctuation">)</span><span class="token punctuation">)</span>                                white_frontier <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>white_frontier<span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token keyword">return</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>black_frontier<span class="token punctuation">)</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>white_frontier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>black_frontier<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>white_frontier<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-棋子数目"><a href="#3-棋子数目" class="headerlink" title="3.棋子数目"></a>3.棋子数目</h4><p>游戏终局的时候，棋子数目是最主要的胜负决定权，这时地势的作用会减弱，退化成棋子数目。所以我这里把棋子数目和地势分开写了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">evalCount</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">(</span>self<span class="token punctuation">.</span>black<span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>count<span class="token punctuation">(</span>self<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>        self<span class="token punctuation">.</span>count<span class="token punctuation">(</span>self<span class="token punctuation">.</span>black<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>count<span class="token punctuation">(</span>self<span class="token punctuation">.</span>white<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-地势"><a href="#4-地势" class="headerlink" title="4.地势"></a>4.地势</h4><p>棋盘上各个位置的权重显然是不一样的，占据角点或者边，都会给玩家带来极大的优势，所以这里根据棋盘上各个点的位置优劣给出了一个地势表（这个表是经验结果，他的效果很好）</p><pre class="line-numbers language-python"><code class="language-python">terrain <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据地势评估</span><span class="token keyword">def</span> <span class="token function">evalTerrain</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_board <span class="token operator">*</span> terrain<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-稳定性"><a href="#5-稳定性" class="headerlink" title="5.稳定性"></a>5.稳定性</h4><p>所谓稳定子，就是指那些无法被轻易翻转的棋子。稳定子在整个博弈期间都有很大的权重，因为一旦你拿到了大量稳定子，你就不可能输掉游戏的。稳定子的计算通常比较困难，这里采用的方法是计算角点、边、和八个方向都无空格的（如果计算的太复杂会比较慢，效果反而不好）。</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 根据稳定子个数评估</span>    <span class="token keyword">def</span> <span class="token function">evalStable</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        black_stable <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>getStableCount<span class="token punctuation">(</span>self<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">)</span>        white_stable <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>getStableCount<span class="token punctuation">(</span>self<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>black_stable <span class="token operator">-</span> white_stable<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>black_stable <span class="token operator">+</span> white_stable <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getStableCount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        stable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 角, 边, 八个方向都无空格</span>        cind1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>        cind2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        inc1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        inc2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        stop <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>_board<span class="token punctuation">[</span>cind1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cind2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> color<span class="token punctuation">:</span>                stop<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                stable<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_board<span class="token punctuation">[</span>cind1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> inc1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>cind2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> inc2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">!=</span> color<span class="token punctuation">:</span>                        <span class="token keyword">break</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        stop<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                        stable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>_board<span class="token punctuation">[</span>cind1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cind2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> color<span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token operator">-</span> stop<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_board<span class="token punctuation">[</span>cind1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> inc1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>cind2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> inc2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">!=</span> color<span class="token punctuation">:</span>                        <span class="token keyword">break</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        stable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        colfull <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>        colfull<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_board<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        rowfull <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>        rowfull<span class="token punctuation">[</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_board<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        diag1full <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            diagsum <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">:</span>                sind1 <span class="token operator">=</span> i                sind2 <span class="token operator">=</span> <span class="token number">0</span>                jrange <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                sind1 <span class="token operator">=</span> <span class="token number">7</span>                sind2 <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">7</span>                jrange <span class="token operator">=</span> <span class="token number">15</span> <span class="token operator">-</span> i            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>jrange<span class="token punctuation">)</span><span class="token punctuation">:</span>                diagsum <span class="token operator">+=</span> abs<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_board<span class="token punctuation">[</span>sind1 <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>sind2 <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> diagsum <span class="token operator">==</span> jrange<span class="token punctuation">:</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>jrange<span class="token punctuation">)</span><span class="token punctuation">:</span>                    diag1full<span class="token punctuation">[</span>sind1 <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>sind2 <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        diag2full <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            diagsum <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">:</span>                sind1 <span class="token operator">=</span> i                sind2 <span class="token operator">=</span> <span class="token number">7</span>                jrange <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                sind1 <span class="token operator">=</span> <span class="token number">7</span>                sind2 <span class="token operator">=</span> <span class="token number">14</span> <span class="token operator">-</span> i                jrange <span class="token operator">=</span> <span class="token number">15</span> <span class="token operator">-</span> i            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>jrange<span class="token punctuation">)</span><span class="token punctuation">:</span>                diagsum <span class="token operator">+=</span> abs<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_board<span class="token punctuation">[</span>sind1 <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>sind2 <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> diagsum <span class="token operator">==</span> jrange<span class="token punctuation">:</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>jrange<span class="token punctuation">)</span><span class="token punctuation">:</span>                    diag2full<span class="token punctuation">[</span>sind1 <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>sind2 <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        stable<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">(</span>            sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>colfull<span class="token punctuation">,</span> rowfull<span class="token punctuation">)</span><span class="token punctuation">,</span> diag1full<span class="token punctuation">)</span><span class="token punctuation">,</span> diag2full<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-占角"><a href="#6-占角" class="headerlink" title="6. 占角"></a>6. 占角</h4><p>这里的占角是指后面是否能够捕获到角点，而不会计算已经占到的角点。角点是最重要的，所以无论何时，都会有很高的权重。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">evalCorner</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    legal_list <span class="token operator">=</span> self<span class="token punctuation">.</span>get_legal_actions<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cur_color<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> legal_list<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">in</span> legal_list<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> legal_list<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">in</span> legal_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">100</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>cur_color <span class="token operator">==</span> self<span class="token punctuation">.</span>black <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">100</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-奇偶性"><a href="#7-奇偶性" class="headerlink" title="7.奇偶性"></a>7.奇偶性</h4><p>所谓奇偶性，就是说谁来下最后一手棋，因为最后下到的棋都是稳定子，所以这会带来一定的优势。受黑白棋的制度限制，如果一局中不出现违规情况，总由白旗下最后一子，所以如果能想办法让对方犯规，那就一定要努力做到。这项会在后期非常重要。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 根据终局奇偶性评估</span><span class="token keyword">def</span> <span class="token function">evalParity</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    final <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>get_total_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span>    <span class="token keyword">if</span> final <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、优化改进"><a href="#五、优化改进" class="headerlink" title="五、优化改进"></a>五、优化改进</h3><h4 id="1-动态评估函数"><a href="#1-动态评估函数" class="headerlink" title="1. 动态评估函数"></a>1. 动态评估函数</h4><p> 我最终的评估函数，是上述评估函数的线性组合，这个权重表是由遗传算法获取的。但是，整盘游戏中的不同时期，每个子评估函数的权重应该是在不断变化的，所以就很有必要设计一个动态评估函数，根据当前棋盘的棋子个数进行改变。</p><p>我在设计中，选择了8个棋子数目，作为游戏进行的8个阶段，我分别对这几个阶段用遗传算法学习了权重表。拿到这几个权重后，再进行线性插值，就能得到65个（0-64）游戏阶段的权重。</p><h4 id="2-启发式搜索：节点排序"><a href="#2-启发式搜索：节点排序" class="headerlink" title="2. 启发式搜索：节点排序"></a>2. 启发式搜索：节点排序</h4><p>我改进了搜索算法，在进行搜索前，会先广搜一层，使用地势表作为评估函数，对节点进行排序，在进行排序后，再深搜6层，这样我们在深搜的时候，剪枝的概率就大大提高了。</p><h4 id="3-使用NumPy优化Python矩阵操作"><a href="#3-使用NumPy优化Python矩阵操作" class="headerlink" title="3. 使用NumPy优化Python矩阵操作"></a>3. 使用NumPy优化Python矩阵操作</h4><p>这个没什么好说的，就是尽可能用numpy矩阵操作代替python的list，因为python的list实在是性能低下，速度不行。</p><h4 id="4-使用Cython"><a href="#4-使用Cython" class="headerlink" title="4. 使用Cython"></a>4. 使用Cython</h4><p>为了达到更好的效果，python的速度已经成为了我的瓶颈。于是我学习了cython，把python编译成so库，然后再运行，这样的速度就会快很多。</p><p>不过由于我们的作业要求语言是python，所以我只是用cython编译了代码，而没有使用cython去改写python代码，把类型变成静态的（虽然效果的确会非常的好）。</p><p>经过我的实验，使用cython后，大概能多搜索一层。</p><h3 id="六、实验效果"><a href="#六、实验效果" class="headerlink" title="六、实验效果"></a>六、实验效果</h3><p>实验效果显然非常的好，我拿到了黑白棋比赛的亚军（自豪）：</p><p><img src="https://i.loli.net/2020/05/11/BZWJa2zCGlV1LET.png" alt="image-20200511193621587"></p><h3 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h3><p>这次能够拿到亚军我还是非常意外的，不过既然拿到了奖，当然是非常开心的，我其实还有很多优化改进能够做，但是由于时间没有来得及搞，比如MPC（呜呜呜其实我MPC都看了好多天论文了，就差没去服务器做统计学习了），但是能拿到6/7胜场这样的成绩我也很知足了，唯一遗憾的是没有机会和第一干一盘，下次我一定锤爆他的AI（玩笑）。</p><p>哦对了，推荐阅读论文《Experiments with Multi-ProbCut and a. New High-Quality Evaluation Function for Othello》</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> AI </tag>
            
            <tag> 博弈 </tag>
            
            <tag> 强化学习 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADS-动态规划</title>
      <link href="/article/50ca31b3.html"/>
      <url>/article/50ca31b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>ZJU大二下感觉课业压力还是非常大的，我现在每天疲于应付作业，ADS经常是我最头痛的一门课。今天看了一晚上算法导论，做一下笔记。</p><h1 id="动态规划的基本过程"><a href="#动态规划的基本过程" class="headerlink" title="动态规划的基本过程"></a>动态规划的基本过程</h1><p>动态规划（DP）与分治算法很像，都是通过子问题的组合来解决问题，不过动态规划会记录子问题的值，从而避免重复计算子问题，通常，这会极大的降低算法复杂度（指数降至多项式）。</p><p>动态规划通常用来求解<strong>最优化问题</strong>。</p><p>一个动态规划算法通常按以下四个步骤设计：</p><ol><li>刻画一个问题的最优解的结构特征</li><li>递归定义最优解求解方案</li><li>计算最优解的代价值，通常采用自顶向上（Bottom-up method）的方法</li><li>利用计算出的信息构造一个最优解</li></ol><p>其中，第四步某些时候并不是必须的，因为这时我们往往更关心解的代价值，而不是解本身。</p><p>比如，钢条分割问题，我们可能比较关心最优解的收益值，而不关心最优解的长度列表（给出分割后每段钢条的长度）。</p><p>但如果需要第四步，就需要在前几步做出一定的改动。    </p><h1 id="动态规划的两种等价形式"><a href="#动态规划的两种等价形式" class="headerlink" title="动态规划的两种等价形式"></a>动态规划的两种等价形式</h1><p>动态规划有两种形式，他们是等价的：</p><ol><li>带备忘的自顶向下法（top-down with memoization）</li><li>自顶向上法（bottom-up method）</li></ol><p>第一种方法，仍然按照正常的递归编写过程，但在这个过程中会保存每个子问题的解，当我们计算一个子问题的解时，首先先检查这个解是否曾经计算过，如果计算过就不需要重复计算了。这种操作是典型的空间换时间，但的确可以极大的改善算法复杂度。</p><p>第二种方法，一般需要恰当定义子问题的“规模”概念，使得任何子问题的求解都只依赖更小的子问题的求解，因此我们就可以将子问题按照规模排序，以从小到大的顺序逐个求解。当求解某个子问题时，它所依赖的全部子问题都已经求解完毕并保存，所以每个子问题都只需求解一次，我们每次求解时也都是第一次遇到这个子问题。</p><h1 id="子问题图"><a href="#子问题图" class="headerlink" title="子问题图"></a>子问题图</h1><p> 一般的，两种算法的渐进复杂度是相同的。但自顶向上法由于没有复杂的递归函数调用开销，通常具有更小的系数，所以我们更多采用自顶向上法。</p><p>在采用自顶向上法处理问题时，我们可以绘制一个子问题图：</p><p><img src="https://i.loli.net/2020/04/13/lt7FOZE9LJcv1TP.jpg" alt="IMG_20200413_195935"></p><p>子问题规模的排序，本质上是对子问题图的反向拓扑排序。</p><p>通常，子问题的求解时间与子问题的度成正比，子问题的数目等于子问题图的顶点数。因此一般来说，动态规划算法的运行时间与顶点和边的数量关系成正比。</p><h1 id="动态规划原理"><a href="#动态规划原理" class="headerlink" title="动态规划原理"></a>动态规划原理</h1><p>适合使用动态规划的问题往往有两个特征：<strong>最优子结构</strong>和<strong>子问题重叠</strong></p><h2 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h2><p>如果一个问题的最优解由相关子问题的最优解组合而成，并且这些子问题可以独立求解，我们就称这样的问题具有<strong>最优子结构</strong></p><p>寻找最优子结构大概有一个通用的模式：</p><ol><li>证明问题的第一个组成部分是做出一个“选择”，并且在做出选择后，会产生一个或多个待解决的子问题</li><li>对于一个给定的问题，在其可能的第一步选择中，我们假定已经知道哪种选择可以得到最优解，而不去关心这种选择是如何具体得到的</li><li>在给定可获得最优解的选择后，确定这次选择会产生哪些子问题，以及如何最好地刻画子问题空间。</li><li>使用“剪切-粘贴”（cut-and-paste）方法证明：构成原问题最优解的子问题的解就是这个子问题本身的最优解。</li></ol><p>步骤四的通用流程是使用反证法：假设当子问题构成了原问题的最优解时，这个子问题的解不是它自身的最优解，那么我们就可以从原问题最优解中“剪切”掉这个子问题的解，并把该子问题的最优解“粘贴”到原问题解中，从而尝试构成原问题的一个“更优解”。如果这个步骤成功了，那么我们新构建的“更优解”就与原假设的“最优解”形成了矛盾。因此原问题的最优解就是由子问题的最优解组合成的。</p><h2 id="重叠子问题"><a href="#重叠子问题" class="headerlink" title="重叠子问题"></a>重叠子问题</h2><p>适合动态规划方法的最优化问题具有的第二个特征应该是子问题具有<strong>重叠子问题 (overlapping subproblems)</strong> 特性。</p><p>这种问题应该具备足够小的子问题空间，换句话说，他的递归算法应该是不断重复求解相同的子问题，而不是不断生成新的子问题。</p><p>如果递归算法反复求解相同的子问题，我们就成这样的最优化问题具有重叠子问题性质。因为动态规划的主要优化就是在于能够避免重复计算，所以具有重叠子问题性质相当重要。</p><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>我们可以通过子问题的个数和每个子问题需要考虑多少种选择的乘积作为时间复杂度的考察标准。</p><p>比如一个动态规划问题的子问题图中共存在M个顶点，每个子问题的度为N，那么时间复杂度就为O(M*N)</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADS </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADS-回溯的模版写法</title>
      <link href="/article/62814ee6.html"/>
      <url>/article/62814ee6.html</url>
      
        <content type="html"><![CDATA[<p>我们需要寻找的问题的解是一个N-tuple $(X_1,X_2,…X_n)$</p><p>因此我们从一个empty tuple开始，把图中符合基本约束的点添加到我们的tuple中，然后如果能够找到一组这样的tuple，符合我们的全部约束条件，那就跳出循环，返回true，否则返回false。</p><p>回溯的关键点在于Undo和设计合适的Check</p><pre class="line-numbers language-c++"><code class="language-c++">bool Backtracking(int i){    Found = false;    if(i > N)    {        return true;/*solved with (X1,X2,...,Xn)*/    }    for(each Xi in Si){        /*check if satisfies the restriction R*/        OK = Check((X1,X2...,Xi), R); /*pruning*/        if(OK){            Add Xi to (X1,X2,...,Xi-1);/*Add*/            Found = Backtracking(i + 1);            if(!Found){                Undo(i);/*recover from (X1,...，Xi) to (X1,...,Xi-1)*/            }        }        if(Found) break;/*Found the Answer*/    }    return Found;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADS </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch下Clion无法在Debug下正常输出</title>
      <link href="/article/d1828b3a.html"/>
      <url>/article/d1828b3a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Error-during-pretty-printers-setup-Error-while-executing-Python-code"><a href="#Error-during-pretty-printers-setup-Error-while-executing-Python-code" class="headerlink" title="Error during pretty printers setup: Error while executing Python code."></a>Error during pretty printers setup: Error while executing Python code.</h1><p>在Arch下使用Clion，发现在Debug下无法正常输出，提示错误信息：Error during pretty printers setup: Error while executing Python code. 百度没有找到很好的答案，于是去Google了一下，在Jetbrains的官方那边，发现了一些Idea用户遇到了同样的问题，有几个人都是Arch用户，他们反应clion出问题是因为Arch的工具链太新了，所以无法正常调试。</p><p>安装Clion-gdb、Clion-cmake以解决问题</p><pre class="line-numbers language-shell"><code class="language-shell">$ yay -S clion-gdb clion-cmake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在Clion配置里面选择bundle GDB和bundle CMake就可以了</p>]]></content>
      
      
      <categories>
          
          <category> Arch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch </tag>
            
            <tag> Clion </tag>
            
            <tag> Python </tag>
            
            <tag> JetBrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让Typora自动使用图床</title>
      <link href="/article/777ec474.html"/>
      <url>/article/777ec474.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>Typora是一款非常优秀的markdown编写工具，也是我写博客的主力，但是最近在准备上传一个以前写的文档时我发现了问题，这个文档里面本地图片太多了，如果上传到博客上，会让我的博客变的非常臃肿，如何处理这个问题呢？</p><h1 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h1><p>最好的解决办法就是使用图床，国内比较好的图床有聚合图床、七牛等等，国外比较著名的有sm.ms等等，我这里采用的是sm.ms，因为他比较方便。</p><p>但是我碰到了一个问题，我的文档里面有55张图片，一个个上传修改链接，好像有点太麻烦了，我搜索了一下，发现Typora本身支持自动上传图片到图床，只需要安装一个名为picgo的神器就可以了。</p><p>###安装picgo:</p><p>正常情况下，直接在设置中点击下图的“下载或更新”，安装picgo-core就可以了：</p><p><img src="https://i.loli.net/2020/03/20/YJSofqkPCDKOHe3.png" alt="image-20200320135659055"></p><p>但是我这里非常慢，所以看了一下typora的文档，发现其实这个所谓picgo只不过是一个js的写的包，我们直接使用npm或者yarn全局安装他就可以了</p><pre class="line-numbers language-bash"><code class="language-bash">$ yarn global add picgo <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后找到他的安装目录，我这里是在“~/.yarn/bin/picgo”,于是在上传服务那个下拉菜单里面选择custom，然后填入“ ~/.yarn/bin/picgo upload”就可以了。</p><p>然后，打开picgo的配置文件</p><pre class="line-numbers language-bash"><code class="language-bash">$ vim .picgo/config.json <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"picBed"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"uploader"</span><span class="token operator">:</span> <span class="token string">"smms"</span><span class="token punctuation">,</span> // 代表当前的默认上传图床为 SM.MS<span class="token punctuation">,</span>    <span class="token property">"smms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">""</span> // 从https<span class="token operator">:</span>//sm.ms/home/apitoken获取的token    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"picgoPlugins"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> // 为插件预留<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用上面的配置覆盖原来的，并把那个token位置的值填上，保存，就可以了。</p><p>回到Typora，可以点击那个验证按钮，验证一下图片上传功能。</p><p>成功以后，你可以在Typora里设置插入图片时候自动上传，也可以在已经插入的图片上右键点击上传图片。图片就会自动上传到sm.ms图床了，是不是非常方便好用？</p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
            <tag> picgo </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Verilog游戏《大富翁》</title>
      <link href="/article/d1dfbad5.html"/>
      <url>/article/d1dfbad5.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文是我在大一时数字逻辑的课程作业报告，其中我删减了一部分涉及隐私或无意义的内容，希望这篇文章能帮助到广大喜欢FPGA的朋友们。</p><h1 id="Part1-游戏介绍"><a href="#Part1-游戏介绍" class="headerlink" title="Part1.游戏介绍"></a>Part1.游戏介绍</h1><h3 id="一、-游戏背景"><a href="#一、-游戏背景" class="headerlink" title="一、 游戏背景"></a>一、 游戏背景</h3><p>大富翁，又名地产大亨，是一种多人策略图版游戏。参赛者分得游戏金钱，凭运气（掷骰子）及交易策略，买地、建楼以赚取租金。英文原名monopoly意为“垄断”，因为最后只得一个胜利者，其余均破产收场。<br>本次课程设计以《大富翁》游戏作为蓝本，以浙江大学紫金港校区作为游戏背景，设计了本款游戏：</p><p><strong>《大富翁之决战紫金港》。</strong></p><p><img src="https://i.loli.net/2020/03/20/OH4v6Wb3aEhPoZy.png" alt="image-20191229161657384.png"></p><h3 id="二、-游戏规则"><a href="#二、-游戏规则" class="headerlink" title="二、 游戏规则"></a>二、 游戏规则</h3><h4 id="1-游戏设置"><a href="#1-游戏设置" class="headerlink" title="1.游戏设置"></a>1.游戏设置</h4><p>这个游戏支持两名游戏玩家。玩家属性包括每月生活费、金钱、绩点、房屋财产。游戏开始时，每位玩家将获得一定的初始资金和初始绩点。游戏主要的目的就是争夺紫金港的地产资源，让对面破产退学或者因为没有地方自习挂科退学。</p><h4 id="2-游戏进行"><a href="#2-游戏进行" class="headerlink" title="2.游戏进行"></a>2.游戏进行</h4><ol><li>每次轮到自己时，按下按钮掷一次骰子，然后按照骰子的点数，在游戏盘上沿顺时针方向移动相应的步数。</li><li>如果停留在土地上，若这个土地没有人占领，则可以花钱买下这块土地，若这块土地已经被自己买下，则可以在上面盖一座房子，增加收入，每块土地最多可以盖一个房子。如果停留在别人的土地上则要缴纳滞留费并降低绩点。</li><li>如果停留在事件块或者红色格，则触发对应事件。</li><li>换下一个人进行游戏，直到有人胜出。</li></ol><h4 id="3-游戏盘说明"><a href="#3-游戏盘说明" class="headerlink" title="3.游戏盘说明"></a>3.游戏盘说明</h4><ol><li><p>初始：每位玩家5000￥初始资金以及3.6/5.0的初始绩点，每月生活费为2000￥</p></li><li><p>起点格：<strong>经过</strong>月初块时，可以向父母领取生活费，<strong>停留</strong>在月初块时，可以获得双倍生活费。</p></li><li><p>地产格：</p><p>​    A. 走到无人购买的区域时，可按支出1600￥买下区域，成为该区域的主人；</p><p>​    B. 走到别人的区域时，则需要根据房屋情况付出相应的代价，包括缴纳滞留费和绩点下降，土地无房屋：金钱 -2000￥，GPA -0.1；土地有房屋，金钱 -4000￥，GPA -0.2。</p><p>​    C. 走到自己的区域时，可以支出1200￥并建筑房屋。</p></li><li><p>事件：触发随机事件，包括：</p><p>​    A. 绩点变化：梦到竺可桢，绩点+0.3；一觉睡到12点，错过早八点名，绩点-0.3；</p><p>​    B. 金钱变化：双十一打折，金钱-3000￥；勤工俭学，金钱+2000￥；</p><p>​    C. 生活费变化：父母升官发财，生活费+1000￥；家庭惨遭电信诈骗，生活费-1200￥；</p></li><li><p>红色格： </p><p>​    A. 睡觉：玩家回到了温馨的寝室，睡大觉，跳过一回合。</p><p>​    B. 评奖：根据玩家当前绩点获得奖学金，奖项如下：</p><p>​        浙江大学学业三等奖学金：GPA：3.8/5.0以上 —— 2000￥；<br>​        浙江大学学业二等奖学金：GPA：4.2/5.0以上 —— 4000￥；<br>​        浙江大学学业一等奖学金：GPA：4.4/5.0以上 —— 6000￥；<br>​        国家奖学金：GPA：4.6/5.0以上，且GPA为所有玩家最高—— 8000￥；<br>​        竺可桢奖学金：GPA：5.0——20000￥；</p><p>​        注：各项奖学金不能同时获得。</p><p>​    C. 期末考试：当玩家<strong>停留</strong>在本方格时，掷一次骰子，获得 （点数-3）X0.05 绩点。</p></li></ol><h4 id="4-胜利条件"><a href="#4-胜利条件" class="headerlink" title="4.胜利条件"></a>4.胜利条件</h4><p>当一位玩家金钱为0或GPA达到1.5及以下时，另一位玩家获胜，游戏结束，播放游戏结束画面。</p><h4 id="5-操作说明"><a href="#5-操作说明" class="headerlink" title="5.操作说明"></a>5.操作说明</h4><p><img src="https://i.loli.net/2020/03/20/t8zKsSVurbG5MYf.png" alt="image-20191229160827419.png"></p><ul><li>重置：使用SW0开关重置输入。</li><li>切换输入：使用SW15切换输入，置0时使用按钮输入，置1时使用PS/2键盘输入。</li><li>掷骰子：我们称上图三个按钮从左到右为0、1、2，我们使用button0掷骰子</li><li>确认：使用button1代表“是”，使用button2代表“否”。</li><li>PS/2模式：使用小键盘的“1、2、3”代替button1、2、3。（后文描述均中button与PS/2小键盘等价）</li></ul><p>玩家1和玩家2均使用同一套按键进行游戏，交替操作。</p><p>游戏开始时，按下button1开始游戏，掷骰子使用button1。</p><p>当走到土地时，会等待确认是否购买土地，按下button2确认购买，button3放弃购买。</p><p>走到事件格时，会抽取一张事件卡显示在屏幕上，按button2确认以继续游戏。</p><p>走到红色格时，会自动触发对应事件，但不会显示在屏幕上（内存资源有限），按button2确认以继续游戏。</p><p>被购买的房子旁边会出现一个有颜色的圆点，紫色代表玩家1所有，白色代表玩家2所有。</p><h4 id="6-显示说明"><a href="#6-显示说明" class="headerlink" title="6.显示说明"></a>6.显示说明</h4><p>Arduino上的七段数码管显示的格式是：C1代表玩家1，C2代表玩家2，数码管第三位空出，第四位表示骰子点数和骰子动画。</p><p>SWORD板上七段数码管显示的格式是：GPA占用两位和一个小数点，中间空出一位，紧接着五位显示金钱（玩家不一定与Arduino的同步）。金钱上限是88888，GPA上限5.0。</p><p>VGA显示的是游戏主体界面，如果碰到橙色时间会有事件卡弹出，如果碰到红色事件则不会有任何提示。</p><p><strong>注意</strong>：无论是红色事件还是普通事件，出发后都需要按下button2确认后才能继续游戏。</p><p>#Part2.名词介绍</p><blockquote><p>###标注：这一部分是文档例行的名词介绍，是为了文档的完整性而存在的，有经验的读者可以跳过这个篇章。</p></blockquote><h3 id="一、VGA"><a href="#一、VGA" class="headerlink" title="一、VGA"></a>一、VGA</h3><p>VGA作为一种标准的显示接口得到了广泛的应用，其信号类型为模拟类型，显示卡端的接口为 15 针母插座。<br>常见的彩色显示器一般都是由CRT(阴极射线管)构成，其引出线共含 5 个信号：R、G、B(三基色信号)、HS(行同步信号)、VS(场同步信号)。每一个像素的色彩由R(红) .G(绿). B(蓝)三基色构成。显示屏一般通过光栅扫描的方式扫描一幅屏幕图像上的各个点，形成整个图片。<br>另外，VGA 时序控制模块是本设计的重要部分，最终的输出信号行、场同步信号必须严格按照VGA 时序标准产生相应的脉冲信号，如下图所示。</p><p><img src="https://i.loli.net/2020/03/20/oQbCszqvP8Spy43.png" alt="image-20191229163550133.png"></p><h3 id="二、PS-2"><a href="#二、PS-2" class="headerlink" title="二、PS/2"></a>二、PS/2</h3><p>PS/2 通信协议是一种双向同步串行通信协议。通信的两端通过 CLOCK(时钟脚)同步，并通过DATA(数据脚)交换数据。</p><p><img src="https://i.loli.net/2020/03/20/akpeB4WThRyjnz8.png" alt="image-20191229163658985.png"></p><p>PS/2 到主机的通信时序如下图所示。数据在 PS/2 时钟的下降沿读取。对于 PS/2 设备，一般来说从时钟脉冲的上升沿到一个数据转变的时间至少要有5us；数据变化到下降沿的时间至少要有 5us，并且不大于 25us，这个时序非常重要应该严格遵循。</p><p><img src="https://i.loli.net/2020/03/20/UZSzlanFOoWfd9P.png" alt="image-20191229163714256.png"></p><h1 id="Part3-开发心得与问题处理"><a href="#Part3-开发心得与问题处理" class="headerlink" title="Part3.开发心得与问题处理"></a>Part3.开发心得与问题处理</h1><h3 id="一、使用Basys3-Vivado-逻辑分析仪的组合进行调试"><a href="#一、使用Basys3-Vivado-逻辑分析仪的组合进行调试" class="headerlink" title="一、使用Basys3 + Vivado +逻辑分析仪的组合进行调试"></a>一、使用Basys3 + Vivado +逻辑分析仪的组合进行调试</h3><p>​    在这次课程设计中，因为实验室开放时间不定，调试我们的游戏就变成了一件困难的事情，于是我从Digilent官网自费购买了一块FPGA开发板：Basys3 。</p><p><img src="https://i.loli.net/2020/03/20/8ZkIFhbLSRonpwX.png" alt="image-20191229123115670"></p><p>这块板子与东四-509性能强大的SWORD当然是没什么可比性，但是价格也是很实惠（在与淘宝店家交流后，报出了王总辉老师的名字，甚至了我额外优惠），七段数码管、按钮、开关、LED灯、USB-HID、VGA、ROM/RAM灯资源都算齐全，基本上可以满足我的课程作业需求。</p><p>​    不过有一个问题，我的这款板子仅支持Vivado开发，并不支持ISE。在与我的学长们交流过后，我了解到Vivado的综合速度要远高于ISE，并且界面的友好程度也比ISE高上很多，于是我最终采用了Vivado作为本次课程作业的开发工具。</p><p>​    除了这些，还有一个东西我非常推荐，那就是无敌的逻辑分析仪。逻辑分析仪是一种分析数字系统逻辑关系的仪器，可以简单理解成一种只能显示0和1的示波器。逻辑分析仪的价格普遍比较贵，这里我推荐一个开源项目：DSLogic，有条件的可以直接去淘宝购买，动手能力强的也可以参考设计书自己制作。价格大概300左右。</p><p><img src="https://i.loli.net/2020/03/20/iqwfcYJ5OvL3dUa.png" alt="image-20191229122827566"></p><p><img src="https://i.loli.net/2020/03/20/H6x7igq2ntlFMRD.png" alt="image-20191229122955566"></p><p>在本文中，主动去编写testbench进行仿真的时候比较少，因为我们的游戏逻辑复杂，单单看简单的仿真结果是得不到很好成效的，另一个原因是我们使用了逻辑分析仪，某种意义上可以代替仿真的很多功能。</p><h3 id="二、PS-2协议键盘与USB-HID"><a href="#二、PS-2协议键盘与USB-HID" class="headerlink" title="二、PS/2协议键盘与USB-HID"></a>二、PS/2协议键盘与USB-HID</h3><p>​    在本次课程作业中，有一个能力提高设计，也就是使用所谓的PS/2键盘作为游戏输入。我在老师提供的VGAdemo中找到了PS/2驱动的代码，但是我一开始完全看不懂，于是我找了一些教程，大致理解了一下PS/2协议的内容。下面是我在网上随便找的一张PS/2接口的图片：</p><p>​    可以看到，这里面是有六个针脚的，但是实际上PS/2协议只需要4个针脚，也就是GND、VCC、PS2_CLK和PS2_DATA。</p><p>​    在本文的后半部分，已经给出了PS/2的时序图，我基本上就是按照这个时序图理解的PS/2键盘，不过在使用过程中却遇到了很多问题。</p><h4 id="1-高级键盘无法使用"><a href="#1-高级键盘无法使用" class="headerlink" title="1.高级键盘无法使用"></a>1.高级键盘无法使用</h4><p>​    首先，我自己使用的键盘是FILCO Minila 机械键盘，接到我的Basys3上，键盘输入完全无效，USB-HID旁边的busy灯长亮，这让我非常疑惑。</p><p>​    于是我查询了Basys3的USB-HID物理实现，得知USB-HID旁边的小芯片FT2232就是用来进行转码的芯片。</p><p><img src="https://i.loli.net/2020/03/20/4QLgtmRckBWJZs5.png" alt="image-20191228171410251"></p><p>从上图中可以看到，FT2232的TXD与RXD两个引脚就是FT2232将USB键盘码解码后得到的PS2_CLK与PS2_DATA</p><p>我百度了很久，我找到了原来所谓的TXD和RXD引脚就是上图中的ADBUS0与ADBUS1两个引脚。</p><p>于是我准备使用逻辑分析仪，分析一下这两个针脚的时序，看看是什么问题，但是由于Basys3上FT2232这个芯片的引脚都非常小，逻辑分析仪的钩子都太大了，没办法测。思考了一段时间后，我发现其实我可以间接测量Artix-7上的B18与A18，来获取PS2_DATA与PS2_CLK，进一步，因为B18和A18是可以自己定义接线的引脚，我就在我的测试工程中把他们接到Basys3右边的一排Pmod connector上的A14与A16两个引脚上，这样就可以很方便的使用逻辑分析仪来测量了。</p><p>​    我使用的逻辑分析仪是著名的开源项目DSLogic的基础版，原生支持PS/2时序的解码，采样了一段时间后，我发现逻辑分析仪的结果完全为空。</p><p>​    也就是意味着我的PS/2时序完全没有输出，这让我很是自闭。我又把我的键盘接回我的电脑，去同学那里借了一个普通薄膜键盘，不过这个键盘插上后逻辑分析仪的结果也是一样，我更自闭了，我认为我的使用方法完全正确，所以我怀疑是学校的PS/2模块本身就有问题。我正查着资料，突然灵机一动，打开我的设备管理器，看了一下设备情况，我发现原来我的键盘会被我的电脑识别成为多个键盘输入。</p><p><img src="https://i.loli.net/2020/03/20/LQeyx3IktGU6i9X.png" alt="image-20191229123717917"></p><p>​    这下我一下子就懂了，是我的键盘太高级了，我猜测是因为现代键盘都实现了N键无冲之类的功能，所以无法被简单识别成为单个设备（当然我懒得去考察这一猜测是否属实了），所以USB-HID在工作的时候，FT2232无法正常的识别与解码我的键盘。</p><h4 id="2-更换使用自制键盘"><a href="#2-更换使用自制键盘" class="headerlink" title="2.更换使用自制键盘"></a>2.更换使用自制键盘</h4><p>​    我在浙江大学学生E志者协会做社团工作的时候，曾经自己做过一个小键盘，当时我是使用佳达隆青轴作为轴体，使用HT82K629A作为控制芯片。拿来做这个课程作业非常合适！下面是百度找的HT82K629A的电路图：<img src="https://i.loli.net/2020/03/20/NeaxBwioQ4OLStl.png" alt="image-20191228174243712"></p><p>​    我的小键盘虽然简陋，但是却出奇的好用，接上这个小键盘，我的逻辑分析仪成功从两个引脚中读到了正确的时序图。</p><p>将这个小键盘的键盘码用DispNumber模块显示在Basys3的七段数码管上，也可以看到按下按键时键盘码正确显示，抬起按键时键盘码恢复为F0，说明我的PS/2模块是完全正常工作的。（下图使用了DSLogic的解码功能）</p><p><img src="https://i.loli.net/2020/03/20/71kQsWUKIYmXzSE.png" alt="image-20191229145638041"></p><p><img src="https://i.loli.net/2020/03/20/5ZcHGUDsYzOEXkq.png" alt="image-20191229145918962"></p><h4 id="3-移植到SWORD2-0"><a href="#3-移植到SWORD2-0" class="headerlink" title="3.移植到SWORD2.0"></a>3.移植到SWORD2.0</h4><p>我的代码移植到Nexys4-DDR这款板子上也可以正常工作，但是在SWORD板子上我却吃了瘪，后来得知SWORD的键盘码使用偶校验，更正后，我的键盘终于可以正常工作了！</p><h3 id="三、VGA模块与IP核生成"><a href="#三、VGA模块与IP核生成" class="headerlink" title="三、VGA模块与IP核生成"></a>三、VGA模块与IP核生成</h3><p>​    VGA模块是我踩坑踩的最多的一个模块。我在这次课程设计中使用的VGA模块来源于老师提供的VGAdemo。</p><p>​    首先碰到的问题是怎么去使用VGA模块。我一开始对VGA输出的Row_addr和Col_addr完全不能理解，我没想明白为什么会有这俩参数，我以为我要自己去推断每个周期我扫描到的像素点位置，结果写出来一堆乱七八糟的东西，完全不能运行。</p><p>​    在参考了几篇优秀报告后，我大概明白了，实际上这个VGA模块是先扫描到一个像素点，此时还没有把颜色涂上 ，VGA会先把这个点的坐标返回，然后根据你提供的data把这个点涂色。明白这个关键问题后，就开始了漫长的调试。</p><p>​    我一开始比较怂，没有直接综合实现，而是先写了Testbench进行仿真，然而仿真结果让我大吃一惊，我的行扫描与场扫描完全是红线。因为手上并没有VGA接口的显示器，没办法直接测试，于是我使用逻辑分析仪，测量HS与VS两个脚。HS与VS在Basys3上也就是P19和R19这两个针脚。</p><p>​    逻辑分析仪测得的时序结果非常稳定，从图中也可以看到场扫频率为60Hz，完全满足了我们的预期，于是我检查了一下仿真结果，原来是我仿真的时间太短，HS和VS还没有来得及出现。</p><p><img src="https://i.loli.net/2020/03/20/F6YmkoK8hUqjdME.png" alt="image-20191229125130221"></p><p>​    准备工作做好后，我开始生成我的ROMIP核，使用的是Block Memory Generator IP核，这里提一下，实际上除了Block Memory 还有 Distribute Memory 本质上其实就是使用FPGA的组合逻辑模拟出一些寄存器，效果并不是很好，而Block Memory则是内嵌在芯片内的高速RAM，再用这些高速RAM去充当ROM，就非常好。至于如何把BMP转成COE文件，这部分我是使用C语言完成的，代码已经放在本文最后，我在宋黎明老师开设的《图像信息处理》上已经熟练掌握了BMP的文件结构和如何使用C/C++操作BMP文件，因此就没有和其他同学那样使用Matlab进行图像处理。我们的IP核使用单口ROM核，因为我觉得单口已经足够满足需求了。</p><h4 id="1-资源问题"><a href="#1-资源问题" class="headerlink" title="1.资源问题"></a>1.资源问题</h4><p>​    烧好ROM核后，就出现了图片显示部分的中第一个问题：资源问题。从下面这份文件中我们可以知道，Basys3共有50块Block Memory，总共1800KB，而一张640x480，深度为12的coe文件大概需要52个Block Memory左右，所以我这个板子连一张背景图片都放不上去，于是我想到了插值。</p><p><img src="https://i.loli.net/2020/03/20/omEeiDLKrZqYdCS.png" alt="image-20191228195350478"></p><p>​    </p><p>总体的想法就是，不使用640x480的图片，而是改用320x240的图片，这样每张图片就只需要13个Block Memory。而在实际现实的时候，我们则将这张图片线性变换到640x480，具体的变换方法如下：</p><p>​    1.首先，我们先给定一个640x480的网格，求出一个到原图的逆线性变换，也就是求出从640x480的图片到320x240的线性变换。</p><p>​    2.然后，因为原先的网格是640x480的，变换到320x240必然会有很多点无法正好落到320x240的网格交点上，这些点应该显示出的颜色值由我们的插值得到的结果决定。</p><p>​    3.采用最近邻插值解决刚刚提出的问题。</p><p>所谓最邻近插值，也就是最naive的插值方法，即：把最近的像素点颜色原样搬过来。</p><p>假如图中的5个有坐标的点为320x240网格上的点，图中除了黄色点以为的其他点都是进行线性变换后640x480网格上的像素点，现在我们可以看到$P(x,y)$附近的四个点都没有正好落在格点上（我们先不管其他点），而他们四个距离黄色点最近，那么我在显示的时候，就把这四个点的颜色都显示成$P(x,y)$的颜色。</p><p>​    这是一种很简单很基础的插值，但是对于我们这种小图片还是很管用的，大大减少了Block Memory资源的浪费。</p><h4 id="2-同步问题"><a href="#2-同步问题" class="headerlink" title="2.同步问题"></a>2.同步问题</h4><p>我遇到的第二个问题是同步问题，我发现我显示的图片整体向右偏移了一个细条，我经过反复查阅资料和参考优秀实验报告，得出这是因为：我VGA模块输出的x，y坐标，在always语句中不会立刻计算这个xy对应的ROM地址值，他会等到下一个时钟周期（clkdiv[1]）到来的时候才会更新，ROM地址更新后，ROM的data也不会立刻更新，而是等到再过一个时钟周期，而VGA模块接受到Data后，也是要再过一个时钟周期才能更新，这就是为什么我的模块无法预期进行。</p><p>解决方案实际上是这样的：首先把根据x、y计算地址值的always模块改成always@(*)，这样他就会退化成时序逻辑，就不存在非阻塞赋值引发的延时问题了，但ROM模块必须是时序的，不过也有办法解决。我最开始给ROM的时钟是25MHz，与VGA同步，这样就一定会造成延迟，但我可以把ROM的时钟加速到VGA时钟的整数倍，比如100MHz。</p><p><img src="https://i.loli.net/2020/03/20/8dfRUk26CiI4OoV.png" alt="image-20191228214741772"></p><p>这样是可以完成对齐的，也可以解决延时问题，不过实际操作的时候我采用了50MHz的时钟频率，因为我发现理论上虽然100MHz可行，但Vivado综合会给出warning，提示我板子的Block Memory可接受最高的时钟频率是50MHz，因此就使用了clkdiv[0]作为时钟。</p><h4 id="3-曲线人物边缘问题"><a href="#3-曲线人物边缘问题" class="headerlink" title="3.曲线人物边缘问题"></a>3.曲线人物边缘问题</h4><p>我的图片显示出来后，还是存在很多问题，最典型的问题就是我的人物是一个复杂几何形状，但我烧好的ROM核里面的图片信息肯定是一个方形的，coe文件没办法携带Alpha通道，无法表示透明度，这样我的人都变成一个个方块，就非常不好。</p><p>我的解决方案也比较简单，就是选择在处理图片的时候，将方块中人物周围的不需要部分填充成为特殊颜色，在转换为coe文件后，只要读取到这种颜色编码，就选择不显示ROM中的数据，而是显示游戏背景，这样就避免了刚刚提到的问题。</p><p>不过另一个问题是，因为Photoshop生成的bmp图片是32位的，在转换为12位coe的时候就会使得很多颜色相近的颜色编码暴力变为同一种颜色编码，这个我最初在图片中埋藏的信息就不知道被转换成什么了。</p><p>所以我干脆以暴制暴，我把整个图片的色阶调低，让他所有颜色都变暗，背景颜色全部填充为0xffffffff，32位色到12位色是一个线性变换过程，不会改变端点的值，因此0xffffffff会被变换成0xffff，我只需检测0xffff就可以了，而且因为我调低了色阶，游戏人物的主体就不会被我干扰到。最后的成型效果如下：</p><p><img src="https://i.loli.net/2020/03/20/53rcMdmfwGt6DKR.png" alt="image-20191229151205953"></p><h3 id="四、底层封装与合理分工"><a href="#四、底层封装与合理分工" class="headerlink" title="四、底层封装与合理分工"></a>四、底层封装与合理分工</h3><p>我在写代码的过程中，觉得如果游戏逻辑的编写者还要去处理复杂的底层逻辑，比如VGA显示输出、七段数码管输出等等。我希望能够让游戏逻辑编写者不去思考这些问题，于是我将我们小组分为游戏逻辑编写和底层封装两部分，正好由两个人完成，两个人提前约定好API，就可以单独调试，互不干扰。</p><p>比如，在处理玩家显示位置的时候，底层部分就这样去实现：</p><pre class="line-numbers language-verilog"><code class="language-verilog"> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">54</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">102</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">187</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">235</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">187</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（这是一小部分代码举例）</p><p>在这种设计中，底层部分把人物的显示位置交给了变量p1_location接管，这个有限状态机的构造，就使得游戏逻辑的编写者只需简单操作p1_location的数值，就可以改变人物的显示位置。同样，房子的显示也是这样构造的：</p><pre class="line-numbers language-Verilog"><code class="language-Verilog">if(has_house[1] == 1 && x_pos >= 96 && x_pos < 144 && y_pos >= 0 && y_pos < 48)beginhouse_data_addr <= y_pos * 48 + (x_pos - 96);endif(has_house[2] == 1 && x_pos >= 229 && x_pos < 277 && y_pos >= 0 && y_pos < 48)beginhouse_data_addr <= y_pos * 48 + (x_pos - 229);end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过有一点不同的是房子的状态是使用类似独热码（但不是）进行编码的，这样就可以在多个地方显示房子。</p><p>至于调试的时候，底层部分编写者就简单写一下Testbench，在里面为几个状态赋值一下，就可以测试到是否有正确显示图片，而游戏逻辑编写者，则可以仿真查看一下各个状态的情况，或者把状态输出到七段数码管和LED灯上。</p><p>从代码总量和调试时间上来看，这样分工也是很合理的，两个人最后是游戏逻辑比底层模块早完成一天。</p><h3 id="六、游戏逻辑的设计"><a href="#六、游戏逻辑的设计" class="headerlink" title="六、游戏逻辑的设计"></a>六、游戏逻辑的设计</h3><p>游戏逻辑的主体就是一个巨大的有限状态机。最顶层的状态被称为global_state，负责管理游戏的开始界面、游戏进行界面和游戏结束界面。而在游戏进行这个状态就是游戏逻辑的主要体现，游戏进行状态下设一个状态名为state的有限状态机，分管如下内容：</p><p>（配图：state状态机）</p><p>可以看出，在这个状态机中，状态与状态之间的转换是设计的最复杂部分。单纯去讲这个游戏的设计的复杂度并不能体现什么，所以我下面会挑一些我遇到的困难进行描述。</p><h4 id="1-随机数问题"><a href="#1-随机数问题" class="headerlink" title="1.随机数问题"></a>1.随机数问题</h4><p>在Verilog中，实际上是预制了随机数生成的方法，也就是使用：$random ，但是这个方法无法在Basys3上正常通过综合，这就造成了很多麻烦。我百度了一些随机数生成方法，最常见的也就是LFSR方法。</p><p><img src="https://i.loli.net/2020/03/20/Qkw9cDH1se3TIJq.png" alt="image-20191228234558989"></p><p>具体的原理上图已经很清楚了，就不过多赘述了，说说我碰到的问题，虽然LFSR模块可以给我一个随机数，但是不知为何，这个随机数在Basys3上是一个不会变化的随机数，这就导致了我的人物每次都走同样的路程，显然这是与我的初衷不符合的。在反复调试后，我依然没有让这个模块正常运转。现在我倒是可能理解了当时为什么会出现问题，很大可能是我为LFSR提供的时钟太快了（后面会详细描述）</p><p>于是我换了一种想法生成随机数，我自己写了一个计时模块，记录从游戏开始到现在经历的周期数目，然后截取低四位，模6再加1返回，作为随机数。</p><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">Random</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>random    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">rand</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> random <span class="token operator">=</span>  <span class="token keyword">rand</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">initial</span> <span class="token keyword">begin</span>        <span class="token keyword">rand</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token keyword">rand</span> <span class="token operator">&lt;=</span> <span class="token keyword">rand</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法很简单，因为我需要随机数的地方只有掷骰子，而每次按下按键的间隔必然是不同的，所以这个随机数还是非常靠谱的。但是实际使用的时候，我所有得到的返回值都是1，也就是我rand % 6的结果都是0，但仿真结果是正常的，这就非常离谱。我调试了一天半，最后发现是时钟周期过快了，随机数模块接收的时钟周期太快了，以至于在物理实现上出现了锁存现象，后来经过试验，将时钟周期调到10ms是非常合适的。</p><p><img src="https://i.loli.net/2020/03/20/a5swQTgX3G6mDbB.png" alt="image-20191229000956417"></p><h4 id="2-掷骰子动画"><a href="#2-掷骰子动画" class="headerlink" title="2.掷骰子动画"></a>2.掷骰子动画</h4><p>我希望在掷骰子的过程中，尽可能让玩家有一些参与感，所以想用Arduino上的四个七段数码管显示一个掷骰子的过程，大概就是：七段数码管上面一直数字乱转，最后停在一个数字上静止，这个数字就是最后骰子的点数。实现这个动画花了我一点脑力，基本上就是，设置两个计数器，一个用来延时，一个用来更新显示数字，然后当更新数字的计数器归零的时候，意味着动画结束，就该显示我的骰子点数了。</p><p>想法是好的，初衷是好的，但是现实是残酷的，我这个东西一开始一直都是常数显示，随机数模块又弄了好久，最后发现的问题还是在非阻塞赋值上。</p><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token function">if</span><span class="token punctuation">(</span>step <span class="token operator">==</span> <span class="token number">4'b1111</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    step <span class="token operator">&lt;=</span> rand_num<span class="token punctuation">;</span>    rand_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    randing <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span> randing <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>rand_delay <span class="token operator">!=</span> <span class="token number">24'hffffff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        rand_delay <span class="token operator">&lt;=</span> rand_delay <span class="token operator">+</span> <span class="token number">24'h000001</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>        randing <span class="token operator">&lt;=</span> randing <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        rand_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>        numberInArduino <span class="token operator">&lt;=</span> <span class="token operator">{</span><span class="token number">12'b1100_0010_0000</span><span class="token punctuation">,</span>rand_num <span class="token operator">}</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>randing <span class="token operator">==</span> <span class="token number">4'b0001</span><span class="token punctuation">)</span><span class="token keyword">begin</span>            numberInArduino <span class="token operator">&lt;=</span> <span class="token operator">{</span><span class="token number">12'b1100_0010_0000</span><span class="token punctuation">,</span> step <span class="token operator">}</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码中，我所有的检测机制，比如对randing的检测，最初都是写的randing == 4‘b0000这样，但是问题在于，这是一个全部由非阻塞赋值写的always模块，我上一句虽然设置了randing归零，但是到了下面检测的时候还没有起作用，所以这里所有的语句都要提前“预判”检测。这个问题引发了不知道多少BUG，说到底还是我对Verilog不够熟悉。</p><h4 id="3-游戏性的考虑"><a href="#3-游戏性的考虑" class="headerlink" title="3.游戏性的考虑"></a>3.游戏性的考虑</h4><p>作为一个能被称为好的游戏，我认为游戏设计者必须考虑到平衡性的问题。因为游戏是《大富翁》，所以在这个游戏里面有很多触发事件。但是我最初设计的时候，六种普通事件分别是：GPA +0.3、GPA -0.3、Money +3000、Money -1500、Salary +1500、Salary -1000。</p><p>这些数据看起来好像没什么问题，但是很有问题的一点就是，金钱、GPA、薪水的期望值都是正的，也就是意味着，这个游戏在后期，越玩钱会越来越多。我曾经测试过，后期到一定程度后，即便一个人占领了全部土地，并在全部土地改好了房子，也很难让另一个玩家破产，但实际上面对这种绝对优势对方应该很快就要败北才对。从这一点考虑，无论如何游戏的金钱总期望应该是负的，这样才是一个有游戏性的游戏。所以我大幅度修改了这些事件的奖励值。</p><h4 id="4-更换性能更强大的板子：Nexys4-DDR"><a href="#4-更换性能更强大的板子：Nexys4-DDR" class="headerlink" title="4.更换性能更强大的板子：Nexys4 DDR"></a>4.更换性能更强大的板子：Nexys4 DDR</h4><p>虽然我已经对我的所有大图片都进行了最近邻插值处理，尽可能的提高空间利用率，但是到了游戏制作后期，我的图片素材占用空间仍然达到了61个Block memory，超过了Basys3能处理的50Block memory上限，这时候其实有两种办法处理，一种是干脆放弃Basys3，去509用SWORD，另一种则是使用FPGA外的存储设备，但是时间紧，任务重，我已经承担不起这个学习成本了。</p><p>最终我另辟蹊径，从我电气学院的同学那边借到了一块Nexys4 DDR板子，它的资源数有足足100 Block memory（当然价格也贵了一倍）。这块板子就成为了我后期调试DEBUG的救星。</p><p><img src="https://i.loli.net/2020/03/20/HSi2QX3I6nd4Zrx.png" alt="image-20191229115016099"></p><p>不过比较遗憾的是，这个板子的八个七段数码管全部都是并行的，而我的游戏中除了并行数码管还用了串行数码管，所以就没办法在这个板子上测试七段数码管了。所以最后几天我还是老老实实去509蹲了几天实验室，不得不说SWORD板子还是真的牛逼。</p><h1 id="Part4-改进想法"><a href="#Part4-改进想法" class="headerlink" title="Part4.改进想法"></a>Part4.改进想法</h1><h3 id="一、用双线性插值代替最近邻插值"><a href="#一、用双线性插值代替最近邻插值" class="headerlink" title="一、用双线性插值代替最近邻插值"></a>一、用双线性插值代替最近邻插值</h3><p>​    最近邻插值虽然简单好用，但是最后线性变换得到的图片清晰度实在是不敢恭维，只能说勉勉强强能看，要想在长宽各放大一倍的情况下还能得到清晰的图片，我最推荐的插值方式其实是双线性插值，但是因为实现起来比较麻烦，我真实的工程里面仍然使用的是最近邻插值。</p><p>具体操作：</p><p>​    设目标点$P$和其他四个点$Q_{11},Q_{12},Q_{21},Q_{22}$的颜色为$f(x,y),f(x_1,y_1),f(x_1,y_2),f(x_2,y_1),f(x_2,y_2)$</p><p>对目标点在$x$轴的两个投影点进行线性Lagrange插值：<br>$$<br>\displaystyle {<br>\begin{aligned}<br>    f(x,y_{1})&amp;\approx {\frac {x_{2}-x}{x_{2}-x_{1}}}f(Q_{11})+{\frac {x-x_{1}}{x_{2}-x_{1}}}f(Q_{21}),\<br>    f(x,y_{2})&amp;\approx {\frac {x_{2}-x}{x_{2}-x_{1}}}f(Q_{12})+{\frac {x-x_{1}}{x_{2}-x_{1}}}f(Q_{22}).<br>\end{aligned}}<br>$$<br>然后再对这两个点使用线性Lagrange插值，得出：<br>$$<br>{\displaystyle {\begin{aligned}f(x,y)&amp;\approx {\frac {y_{2}-y}{y_{2}-y_{1}}}f(x,y_{1})+{\frac {y-y_{1}}{y_{2}-y_{1}}}f(x,y_{2})\&amp;={\frac {y_{2}-y}{y_{2}-y_{1}}}\left({\frac {x_{2}-x}{x_{2}-x_{1}}}f(Q_{11})+{\frac {x-x_{1}}{x_{2}-x_{1}}}f(Q_{21})\right)\&amp;+{\frac {y-y_{1}}{y_{2}-y_{1}}}\left({\frac {x_{2}-x}{x_{2}-x_{1}}}f(Q_{12})+{\frac {x-x_{1}}{x_{2}-x_{1}}}f(Q_{22})\right)\&amp;={\frac {1}{(x_{2}-x_{1})(y_{2}-y_{1})}}{\big (}f(Q_{11})(x_{2}-x)(y_{2}-y)+f(Q_{21})(x-x_{1})(y_{2}-y)\&amp;+f(Q_{12})(x_{2}-x)(y-y_{1})+f(Q_{22})(x-x_{1})(y-y_{1}){\big )}\&amp;={\frac {1}{(x_{2}-x_{1})(y_{2}-y_{1})}}{\begin{bmatrix}x_{2}-x&amp;x-x_{1}\end{bmatrix}}{\begin{bmatrix}f(Q_{11})&amp;f(Q_{12})\f(Q_{21})&amp;f(Q_{22})\end{bmatrix}}{\begin{bmatrix}y_{2}-y\y-y_{1}\end{bmatrix}}.\end{aligned}}}<br>$$<br>这样我们就得到了目标点的颜色值。我一般使用双线性插值时都是对$RGB$三个通道一起进行双线性插值，实际上也可以对三个通道分别进行双线性插值，效果也不错。</p><h3 id="二、为游戏添加配乐"><a href="#二、为游戏添加配乐" class="headerlink" title="二、为游戏添加配乐"></a>二、为游戏添加配乐</h3><p>作为一款大富翁游戏，没有音乐实在是非常遗憾，但实际上这个功能的实现并不是很复杂。我们可以看到，SWORD板子上附带的那个小块Arduino实际上已经自带了一个蜂鸣器，使用这个蜂鸣器就可以简单做出配乐效果。</p><p>但是我问了一些学长学姐，据说509实验板上的蜂鸣器都是被屏蔽改造的，因为往届做实验的时候蜂鸣器会经常发声，干扰学生，于是学校就把这些蜂鸣器都屏蔽了（未经考证）</p><p>这就断了蜂鸣器这条路。不过如果真的想做配乐，也不是没有办法的。我思考了一下大概有两条路：</p><p>其一，使用SWORD板子上的3.5MM音频输出口。</p><p><img src="https://i.loli.net/2020/03/20/c4ErHGShJoQpj8z.png" alt="image-20191229120706561"></p><p>这个3.5MM接口的推力可能不是很够，这里我没有找到SWORD2.0的设计文档，不过我自己猜测应该和Nexys4-DDR的3.5MM接口构造差不多。下图是Nexys4-DDR的设计图：</p><p><img src="https://i.loli.net/2020/03/20/sUhApQK7aSczFNV.png" alt="image-20191229121209930"></p><p>看起来只是可以输出音频信号，但是推动力应该不够驱动小音箱，不过我们可以从淘宝上购买一个小功放来解决这个问题。</p><p><img src="https://i.loli.net/2020/03/20/b8zBEgnDJcloxvr.png" alt="image-20191229121845673"></p><p>不过这个改造和使用起来也不是很方便。</p><p>第二种方法就是使用板子上的Pmods扩展一个音频输出。Digilent中国官网上就有售卖这种东西，我们以PmodAMP2举例：</p><p><img src="https://i.loli.net/2020/03/20/1YUAFsi2lQ4bcMW.png" alt="image-20191229122054226"></p><p>这种方式的好处是文档齐全，而且保证能用，毕竟是官网扩展，肯定是靠谱的。</p><p><img src="https://i.loli.net/2020/03/20/wBp1CNadlmqJu3O.png" alt="image-20191229122154147"></p><p>PmodAMP2的构造非常简单，如果不想购买的话也可以直接自己焊一块出来。官方有很多这个模块的使用教程，甚至还有一些PmodAMP2配合Basys3制作的项目案例，比如节奏大师之类的。</p><p>使用PmodAMP2的时候只需要把对应的模块针脚接好就行了。</p><p><img src="https://i.loli.net/2020/03/20/KhVWqAsSZuLMJoj.png" alt="image-20191229122355972"></p><h3 id="三、实现人物选择界面"><a href="#三、实现人物选择界面" class="headerlink" title="三、实现人物选择界面"></a>三、实现人物选择界面</h3><p>在期中时交的课程设计规划中，我给出了一个人物选择界面，支持2-4人同时游戏，其实这一部分在实现难度上并不大，对于一个大富翁游戏而言，2个玩家4个玩家的区别无非就是复读一遍代码，把状态机改的更复杂一点，但是问题在于，如果添加了任务选择界面，我就需要再添加一张320x240的选择界面图片和四张192x192人物大图以及两个48x48人物小图。</p><p>在添加这些图片之前，我已经使用了61个Block Memory，加上这些图片必然会超过100个Block Memory，而Nexys4-DDR仅有100个Block Memory，所以为了方便我的调试（不想每天都蹲在509），就把这部分无关紧要的添头功能去掉了。</p><h1 id="Part5-辅助模块描述"><a href="#Part5-辅助模块描述" class="headerlink" title="Part5.辅助模块描述"></a>Part5.辅助模块描述</h1><h3 id="一、BCD转换模块"><a href="#一、BCD转换模块" class="headerlink" title="一、BCD转换模块"></a>一、BCD转换模块</h3><p>该模块十分简单，主要工作就是把传入的数据（二进制）进行处理，转换为十进制输出，该模块的作用是将人物的金钱、绩点等信息转换为十进制，然后送给七段数码管模块进行显示。代码如下图所示，输入数据为8bit或20bit的二进制数值，然后转换为相应的四位十进制数输出。</p><pre class="line-numbers language-Verilog"><code class="language-Verilog">module BCD_20(    input [19:0]binary,    output [19:0]bcd    );    wire [3:0] d1;        wire [3:0] d2;        wire [3:0] d3;        wire [3:0] d4;        wire [3:0] d5;        assign d1 = binary % 10;    assign d2 = (binary / 10) % 10;     assign d3 = (binary / 100) % 10;     assign d4 = (binary / 1000) % 10;     assign d5 = (binary / 10000) % 10;     assign bcd = { d5 , d4 , d3 , d2 , d1 };endmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、ROM-IP核模块"><a href="#二、ROM-IP核模块" class="headerlink" title="二、ROM IP核模块"></a>二、ROM IP核模块</h3><p>本游戏的游戏界面为静态显示，为了给玩家带来更好的游戏体验，我们从网上搜寻和绘制处理了丰富的图片素材，通过c语言处理32位，生成相应的COE文件，创建了游戏开始界面、游戏盘、游戏结束界面、人物、房屋、事件卡等图片的ROM IP核。</p><p>具体如下图所示。</p><p><img src="https://i.loli.net/2020/03/20/x15vO9wcyhLJHMn.png" alt="image-20191229165250124"></p><p>其中，backboard、start、event图片均采取了最近邻差值的方式进行处理，可以在保存图像信息的情况下尽量减少ROM占用。而house与player图片则使用了PS工具进行处理，人物、房屋边缘以外的部分均为白色，并调整主体部分的色阶。当读取到0xffff时，转而读取gameborad的图像信息，以实现图片有效覆盖的设计。</p><p>、start图片均采取了最逼近差值的方式进行处理，可以在保障图像信息的情况下更好地完成显示。而house与player图片则使用了PS工具进行处理，人物、房屋边缘以外的部分均为白色，并调整主体部分的色阶。当读取到0xffff时，转而读取gameborad的图像信息，以实现图片有效覆盖的设计。</p><h3 id="三、随机数模块"><a href="#三、随机数模块" class="headerlink" title="三、随机数模块"></a>三、随机数模块</h3><p>这个部分前文已经介绍了，这里略过。</p><h3 id="四、VGA模块"><a href="#四、VGA模块" class="headerlink" title="四、VGA模块"></a>四、VGA模块</h3><p>使用的是学校提供的VGAdemo中的VGA模块，代码附在文末。</p><h3 id="五、PS-2模块"><a href="#五、PS-2模块" class="headerlink" title="五、PS/2模块"></a>五、PS/2模块</h3><p>使用的是学校提供的SWORD说明书PPT中的PS/2模块，代码附在文末。</p><h3 id="六、DispNumber模块"><a href="#六、DispNumber模块" class="headerlink" title="六、DispNumber模块"></a>六、DispNumber模块</h3><p>在数逻实验中我们曾经自己通过ISE画图的方式设计过并行数码管显示模块，但是我觉得我当时画图得到的模块不是很好用，于是将sch生成的vf文件改造了一下，重构了部分代码，把所有的使能改成了高有效。代码附在文末</p><h3 id="七、去抖动模块"><a href="#七、去抖动模块" class="headerlink" title="七、去抖动模块"></a>七、去抖动模块</h3><p>使用的是实验课上做的pbdebounce模块，用来给按钮输入去抖动，没什么好说的，大家都做过。</p><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">pbdebounce</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token keyword">wire</span> clk_1ms<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token keyword">wire</span> button<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> pbreg        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pbshift<span class="token punctuation">;</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        pbshift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk_1ms<span class="token punctuation">)</span><span class="token keyword">begin</span>    pbshift <span class="token operator">=</span> pbshift <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    pbshift<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>button<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pbshift<span class="token operator">==</span><span class="token number">8'b0</span><span class="token punctuation">)</span>    pbreg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pbshift<span class="token operator">==</span><span class="token number">8'hff</span><span class="token punctuation">)</span>     pbreg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">end</span> <span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、分频器模块"><a href="#八、分频器模块" class="headerlink" title="八、分频器模块"></a>八、分频器模块</h3><p>使用实验课上做的clkdiv模块，没什么好描述的，代码附在文末。</p><h3 id="九、串行数码管显示模块"><a href="#九、串行数码管显示模块" class="headerlink" title="九、串行数码管显示模块"></a>九、串行数码管显示模块</h3><p>这个模块的核心部分是并行转串行，需要一个移位寄存器，这个部分的代码我是使用的VGAdemo中的位移寄存器，译码工作则是使用的MC14495模块。代码附在文末</p><h1 id="Part6-仿真、资源分配与RTL"><a href="#Part6-仿真、资源分配与RTL" class="headerlink" title="Part6.仿真、资源分配与RTL"></a>Part6.仿真、资源分配与RTL</h1><h3 id="一、RTL、资源分配与引脚分配图"><a href="#一、RTL、资源分配与引脚分配图" class="headerlink" title="一、RTL、资源分配与引脚分配图"></a>一、RTL、资源分配与引脚分配图</h3><p>这次课程作业使用的板子是SWORD2.0，我利用的资源也是非常多的，包括arduino七段数码管、主板串行七段数码管、VGA、USB-HID等等，综合实现后的资源使用图如下：</p><p><img src="https://i.loli.net/2020/03/20/sL49kRAZv6Iy1Kx.png" alt="image-20191229174557967"></p><p>引脚分配图如下：</p><p><img src="https://i.loli.net/2020/03/20/uOib3KQtWqZCRGd.png" alt="image-20191229175054998"></p><p>Schematic图如下：</p><p><img src="https://i.loli.net/2020/03/20/UyS5g4bMkLWRwiC.png" alt="image-20191229175234475"></p><p>从上面这几张图我们可以看到，这次课程作业实际上使用的门级电路和板上资源是非常非常多的，我使用1467cells，总计8320nets，连输出输入口都有39个，实际上在期中开题报告中，我本来规划做出更多的功能，但未能完全实现主要还是受到了板子资源的制约和时间制约。</p><h3 id="二、TOP模块综合后时序仿真"><a href="#二、TOP模块综合后时序仿真" class="headerlink" title="二、TOP模块综合后时序仿真"></a>二、TOP模块综合后时序仿真</h3><p>####输入输出时序图</p><p><img src="https://i.loli.net/2020/03/20/VaPkFzGulJ7RwKS.png" alt="image-20191230134808335"></p><h4 id="游戏关键变量时序图：玩家金钱与GPA"><a href="#游戏关键变量时序图：玩家金钱与GPA" class="headerlink" title="游戏关键变量时序图：玩家金钱与GPA"></a>游戏关键变量时序图：玩家金钱与GPA</h4><p><img src="https://i.loli.net/2020/03/20/MdWhN42Zr9BHkGC.png" alt="image-20191230140254197"></p><h3 id="三、TOP模块实现后时序仿真"><a href="#三、TOP模块实现后时序仿真" class="headerlink" title="三、TOP模块实现后时序仿真"></a>三、TOP模块实现后时序仿真</h3><h4 id="输入输出时序图"><a href="#输入输出时序图" class="headerlink" title="输入输出时序图"></a>输入输出时序图</h4><p><img src="https://i.loli.net/2020/03/20/ypY72XSVUe6gmcF.png" alt="image-20191230120328942"></p><p><img src="https://i.loli.net/2020/03/20/HUO3rBhJNpS1wQv.png" alt="image-20191230120435765"></p><h4 id="游戏关键变量时序图：玩家金钱与GPA-1"><a href="#游戏关键变量时序图：玩家金钱与GPA-1" class="headerlink" title="游戏关键变量时序图：玩家金钱与GPA"></a>游戏关键变量时序图：玩家金钱与GPA</h4><p><img src="https://i.loli.net/2020/03/20/UWi1wd3z8b2g7fl.png" alt="image-20191230130254321"></p><h1 id="Part7-物理验证"><a href="#Part7-物理验证" class="headerlink" title="Part7.物理验证"></a>Part7.物理验证</h1><p>这次课程作业前期主要在Basys3上完成，后期资源不够后则改用Nexys4完成，最后再移植到SWORD2.0上。</p><p>最终的工程文件已经不能在Basys3上通过实现了（资源数不足）因此我们物理验证仅在Nexys4和SWORD2.0上开展，顺便也验证工程的可移植性。</p><p>以下综合、实现、生成比特流均在下述配置下进行，使用开发工具为Vivado 2019.1：</p><p><strong>CPU Name: Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz</strong></p><table><thead><tr><th>Property</th><th>Value</th></tr></thead><tbody><tr><td>Base Frequency</td><td>2.11 GHz</td></tr><tr><td>Max Turbo Frequency</td><td>4.20 GHz</td></tr><tr><td>Cache</td><td>8 MB Intel® Smart Cache</td></tr><tr><td>Cores Number</td><td>4</td></tr><tr><td>Threads</td><td>8</td></tr><tr><td>TDP(TDP-up)</td><td>25W</td></tr></tbody></table><p><strong>RAM:   16GB LPDDR3 2133MHz with Two channel memory</strong></p><p><strong>SSD:     SAMSUNG MZVLB512HAJQ-000L7</strong></p><h3 id="一、Nexys4物理验证"><a href="#一、Nexys4物理验证" class="headerlink" title="一、Nexys4物理验证"></a>一、Nexys4物理验证</h3><p>由于金钱和GPA两个部分需要在去串行的七段数码管上显示，Nexys4不具备这个硬件，所以这个部分在Nexys4的物理验证中不会给出。我在代码中注释掉这个部分。</p><p>我们来记录一下时间：</p><table><thead><tr><th>Event</th><th>Time</th></tr></thead><tbody><tr><td>Synthesis（including ROM IP cores）</td><td>00:01:22</td></tr><tr><td>Implementation</td><td>00:01:48</td></tr><tr><td>Generate Bitstream</td><td>00:00:26</td></tr></tbody></table><p>连接板子进行验证：</p><p><img src="https://i.loli.net/2020/03/20/WYGmPqltaQjn97i.png" alt="image-20200320132824054"></p><p>从上图可以看出，我们的游戏界面很好的展现了（注：屏幕左上角白斑是屏幕自身有物理损坏，并非代码问题）</p><p>进入正式的游戏界面，我们可以看到：</p><p><img src="https://i.loli.net/2020/03/20/lXU5mtxygBRjoEz.png" alt="image-20191230154523963"></p><p>我们的游戏界面也是可以正确显示的，现在再让我们看一下并行七段数码管的显示效果：</p><p><img src="https://i.loli.net/2020/03/20/QtDEB7OVlbKqxRW.png" alt="image-20191230154611173"></p><p>C1代表轮到玩家1游戏，这说明我们正确的显示了游戏顺序。下面是事件的触发截图：</p><p><img src="https://i.loli.net/2020/03/20/qwZKMsUTL1yiteD.png" alt="image-20191230154727877"></p><p>此时，轮到了玩家2游戏：</p><p><img src="https://i.loli.net/2020/03/20/RVhDrHUApmzLc9Y.png" alt="image-20191230154829149"></p><p>可以看到显示数据也是完全正确的。</p><p>至此，我们简单的物理验证成功，满足了最初的设计需求。</p><h3 id="二、SWORD2-0物理验证"><a href="#二、SWORD2-0物理验证" class="headerlink" title="二、SWORD2.0物理验证"></a>二、SWORD2.0物理验证</h3><p>首先还是一样，我们先来记录一下时间：</p><table><thead><tr><th>Event</th><th>Time</th></tr></thead><tbody><tr><td>Synthesis（including ROM IP cores）</td><td>00:01:54</td></tr><tr><td>Implementation</td><td>00:02:28</td></tr><tr><td>Generate Bitstream</td><td>00:01:06</td></tr></tbody></table><p>因为本次课程设计的主要板子是SWORD2.0，所以我们会在这个板子上验证全部的功能实现。</p><p>首先是游戏开始画面的展示：</p><p><img src="https://i.loli.net/2020/03/20/BtDAKgbQh84ZIU5.png" alt="image-20200101155424592"></p><p>进入游戏：</p><p><img src="https://i.loli.net/2020/03/20/epTRXhsyH9Z5gfW.png" alt="image-20200101155506377"></p><p>数码管显示：</p><p><img src="https://i.loli.net/2020/03/20/Rxkcr4Le3yNalvf.png" alt="image-20200101155528717"></p><p>触发事件：</p><p><img src="https://i.loli.net/2020/03/20/xYmh7XvNFZ3SA1u.png" alt="image-20200101155547032"></p><p>购买土地：</p><p><img src="https://i.loli.net/2020/03/20/iAgLG1EeTSaJvrB.png" alt="image-20200101155619122"></p><p>上图紫色和白色圆点分别代表玩家1、2持有土地</p><p>从上述内容可以看出，我们的游戏在SWORD2.0上也能很好的运行，这完成了我们的课程设计预期目的，同时也验证了我们游戏具有良好的可移植性，在不同资源数的板子上都可以正常运行。</p><h1 id="Part8-心得体会"><a href="#Part8-心得体会" class="headerlink" title="Part8.心得体会"></a>Part8.心得体会</h1><p>数逻的课程设计是我在大学这段时间碰到的最困难的课程设计，其困难的主要原因在于我对Verilog语法和对开发环境的不熟悉。硬件开发与以往我们使用高级语言进行软件开发的感觉完全不同，因为他既需要很好的逻辑思维，又需要开发者直接去与底层接触，思考每个模块在物理实现上的运作方式。这个作业前前后后做了两周多的时间，并且紧紧连着考试周，所以我做的也非常紧张。</p><p>如果这个作业不是在考试周附近完成的，我可能会做的更好，我觉得目前看来制约我作业完成程度的主要原因还是时间和其他学科的课业压力。</p><p>在本次实验过程中，我参考了很多先人前辈的作品，也翻阅了很多文档。下面是我自己的一点心得：</p><h3 id="对我有帮助的参考文档"><a href="#对我有帮助的参考文档" class="headerlink" title="对我有帮助的参考文档"></a>对我有帮助的参考文档</h3><h4 id="1-Digilent中国"><a href="#1-Digilent中国" class="headerlink" title="1.Digilent中国"></a>1.Digilent中国</h4><p>这是Digilent的中国官网，里面从开发板购买、入门，到Verilog编写、仿真、物理实现都有很详细的教程，而且有自己的开源社区，有无数FPGA爱好者在这里讨论，作为一个课程设计的编写者，这个网站的资源对我是非常非常有价值的。</p><p>我自己的板子是Basys3，Basys3的教程也是最为丰富的之一。</p><p>这些项目中，有很多精品，对课程设计会起到极大的帮助，我最开始设计课程作业的时候就是先阅读了下面这个贪吃蛇小游戏的代码，从代码中学习Verilog的编写方法和流程，逐步去学会自己设计。</p><h4 id="2-ZJUArch"><a href="#2-ZJUArch" class="headerlink" title="2.ZJUArch"></a>2.ZJUArch</h4><p>在github上有浙大的一个仓库，名为ZJUArch，里面有着很丰富的Verilog语法学习资料，适合初学者入门参考。<img src="https://i.loli.net/2020/03/20/SJGDIvB8x41jsrz.png" alt="image-20191229114046330"></p><h4 id="3-FPGA4FUN"><a href="#3-FPGA4FUN" class="headerlink" title="3.FPGA4FUN"></a>3.FPGA4FUN</h4><p><a href="https://www.fpga4fun.com/" target="_blank" rel="noopener">https://www.fpga4fun.com/</a> 是一个神奇的网站，里面专门有很多神仙教程教新人如何使用FPGA做一些有趣的东西，课程设计的VGA和PS2模块在这里讲的非常清楚。</p><p><img src="https://i.loli.net/2020/03/20/R6haZfvlqtQFDA2.png" alt="image-20191229114236200"></p><h1 id="附录：各模块代码合集"><a href="#附录：各模块代码合集" class="headerlink" title="附录：各模块代码合集"></a>附录：各模块代码合集</h1><h3 id="一、TOP模块（附有注释）"><a href="#一、TOP模块（附有注释）" class="headerlink" title="一、TOP模块（附有注释）"></a>一、TOP模块（附有注释）</h3><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token comment" spellcheck="true">//////////////////////////////////////////////////////////////////////////////////</span><span class="token comment" spellcheck="true">// Company: </span><span class="token comment" spellcheck="true">// Engineer: </span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">// Create Date: 12/06/2019 08:38:02 PM</span><span class="token comment" spellcheck="true">// Design Name: </span><span class="token comment" spellcheck="true">// Module Name: Top</span><span class="token comment" spellcheck="true">// Project Name: </span><span class="token comment" spellcheck="true">// Target Devices: </span><span class="token comment" spellcheck="true">// Tool Versions: </span><span class="token comment" spellcheck="true">// Description: </span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">// Dependencies: </span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">// Revision:</span><span class="token comment" spellcheck="true">// Revision 0.01 - File Created</span><span class="token comment" spellcheck="true">// Additional Comments:</span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">//////////////////////////////////////////////////////////////////////////////////</span><span class="token keyword">module</span> <span class="token function">Top</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> reset<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//restart the game</span>    <span class="token keyword">input</span> sw_input<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//swith the input-style : PS2/button</span>    <span class="token keyword">input</span> dice_in<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//roll the dice</span>    <span class="token keyword">input</span> yes_in<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//1 means choosing yes</span>    <span class="token keyword">input</span> no_in<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//1 means choosing no</span>    <span class="token keyword">input</span> ps2_clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> ps2_data<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//SWORD</span>     <span class="token keyword">output</span> S_DT<span class="token punctuation">,</span>     <span class="token keyword">output</span> S_CLK<span class="token punctuation">,</span>     <span class="token keyword">output</span> S_CLR<span class="token punctuation">,</span>     <span class="token keyword">output</span> S_EN<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>ArduinoAN<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>ArduinoSegment<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> r<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> g<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span>    <span class="token keyword">output</span> hs<span class="token punctuation">,</span>    <span class="token keyword">output</span> vs<span class="token punctuation">,</span>    <span class="token keyword">output</span> keypad    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//Keypad</span><span class="token keyword">assign</span> keypad <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//VGA out</span><span class="token keyword">wire</span> VGA_rdn<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>x_pos<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>y_pos<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>display_data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//input </span><span class="token keyword">reg</span> yes<span class="token punctuation">;</span><span class="token keyword">reg</span> no<span class="token punctuation">;</span><span class="token keyword">reg</span> dice<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PS2 out</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>ps2_data_cur<span class="token punctuation">;</span><span class="token keyword">wire</span> ps2_ready<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rom addr</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>background_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>background_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>player1_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>player1_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>player2_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>player2_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>house_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>house_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>start_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>start_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>game_over_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>game_over_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event1_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event1_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event2_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event2_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event3_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event3_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event4_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event4_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event5_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event5_data<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event6_data_addr<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>event6_data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//disp number</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>numberInArduino<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>numberInSWORD<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//AntiJitter</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>clk_div<span class="token punctuation">;</span><span class="token keyword">wire</span> dice_AJ<span class="token punctuation">;</span><span class="token keyword">wire</span> yes_AJ<span class="token punctuation">;</span><span class="token keyword">wire</span> no_AJ<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rand</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>rand_num<span class="token punctuation">;</span>Random <span class="token function">FuckRandom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span>rand_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clkdiv <span class="token function">clk_d</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">rst</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clkdiv</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pbdebounce <span class="token function">ccc</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk_1ms</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">button</span><span class="token punctuation">(</span><span class="token operator">~</span>dice_in<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">pbreg</span><span class="token punctuation">(</span>dice_AJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pbdebounce <span class="token function">ddd</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk_1ms</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">button</span><span class="token punctuation">(</span><span class="token operator">~</span>yes_in<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">pbreg</span><span class="token punctuation">(</span>yes_AJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pbdebounce <span class="token function">eee</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk_1ms</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">button</span><span class="token punctuation">(</span><span class="token operator">~</span>no_in<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">pbreg</span><span class="token punctuation">(</span>no_AJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//debug</span><span class="token comment" spellcheck="true">//assign reset = rst;</span><span class="token comment" spellcheck="true">//assign sw_input_AJ = sw_input;</span><span class="token comment" spellcheck="true">//assign dice_AJ = dice;</span><span class="token comment" spellcheck="true">//assign no_AJ = no;</span><span class="token comment" spellcheck="true">//assign yes_AJ = yes;</span><span class="token comment" spellcheck="true">// reg S_DT;</span><span class="token comment" spellcheck="true">// reg  S_CLK;</span><span class="token comment" spellcheck="true">// reg S_CLR;</span><span class="token comment" spellcheck="true">// reg S_EN;</span><span class="token comment" spellcheck="true">//ROM</span>Start <span class="token function">start_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>start_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>start_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Game_over <span class="token function">game_over_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>game_over_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>game_over_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>background <span class="token function">Background_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>background_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>background_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ROM of background img</span>House_rom <span class="token function">House_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>house_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>house_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ROM of house img</span>Player1_rom <span class="token function">Player1_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>player1_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>player1_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ROM of house img</span>Player2_rom <span class="token function">Player2_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>player2_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>player2_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ROM of house img</span>event1 <span class="token function">event1_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>event1_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>event1_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event2 <span class="token function">event2_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>event2_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>event2_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event3 <span class="token function">event3_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>event3_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>event3_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event4 <span class="token function">event4_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>event4_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>event4_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event5 <span class="token function">event5_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>event5_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>event5_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event6 <span class="token function">event6_rom</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>event6_data_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>event6_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//input and output </span>vgac <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">d_in</span><span class="token punctuation">(</span>display_data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">vga_clk</span><span class="token punctuation">(</span>clk_div<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">clrn</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">row_addr</span><span class="token punctuation">(</span>y_pos<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">col_addr</span><span class="token punctuation">(</span>x_pos<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">rdn</span><span class="token punctuation">(</span>VGA_rdn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">hs</span><span class="token punctuation">(</span>hs<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">vs</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// display module</span>ps2_keyboard <span class="token function">KBD</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rst</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">ps2_clk</span><span class="token punctuation">(</span>ps2_clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">ps2_data</span><span class="token punctuation">(</span>ps2_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">data_out</span><span class="token punctuation">(</span>ps2_data_cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span>ps2_ready<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ps2 keyboard module</span>DispNumber <span class="token function">DispNumberInArduino</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">HEXS</span><span class="token punctuation">(</span>numberInArduino<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">LES</span><span class="token punctuation">(</span><span class="token number">4'b1101</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">points</span><span class="token punctuation">(</span><span class="token number">4'b0000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">RST</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">AN</span><span class="token punctuation">(</span>ArduinoAN<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">Segment</span><span class="token punctuation">(</span>ArduinoSegment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SEG_DRV <span class="token function">DispNumberInSWORD</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">num</span><span class="token punctuation">(</span>numberInSWORD<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span><span class="token operator">~</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token number">8'b1000_0000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">S_DT</span><span class="token punctuation">(</span>S_DT<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">S_CLK</span><span class="token punctuation">(</span>S_CLK<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">S_CLR</span><span class="token punctuation">(</span>S_CLR<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">S_EN</span><span class="token punctuation">(</span>S_EN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//GAME Properties</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>global_state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//the global state: 0 represents start-state; 1 represents game-going; 2 represents game-over.</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*the state of game-going: 0 represents stand-by state for checking current player properties to tell if the game is over, to decide the next state;                           1 represents that it's player1's turn to roll the dice;                           2 represents that it's player2's turn to roll the dice;                           3 represents executing red-square events;                           4 represents random events;                           5 represents buying empty land or build houses on your land;                           6 represents staying on another player's land;                           7 represents game over.*/</span><span class="token keyword">reg</span> turn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1 represents it's player1's turn while 0 reprenstes palyer2</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>has_house<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//to tell if there are any houses on 20 lands: 0 means there are no houses while 1 means there is</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>land_owner<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//to store the land onwer information of 20 lands: 00 means the land doesn't belong to anyone; 01 means the land belongs to player1 while 10 means the land belongs to player2</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>move_delay<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the time interval of showing the movement steps of the players</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>step<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//to store the steps one player should go after rolling the dice.</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>rand_delay<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the time interval of showing the rolling numbers of the dice</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>randing<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the dice number shown each time</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>gpa_delay<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the time interval of showing the random gpa after one player stay on the exam square</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>gpa_rand<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the gpa of the player gets after staying ont the exam square</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>show_event<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the card of 6 random events</span><span class="token comment" spellcheck="true">//Player Properties</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p1_money<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p2_money<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//in the range of 0-88888</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p1_money_bcd<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p2_money_bcd<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p1_gpa<span class="token punctuation">;</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p2_gpa<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//in the range of 0-50, 50 represents gpa 5.0</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p1_gpa_bcd<span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p2_gpa_bcd<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p1_salary<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p2_salary<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//salary means the monthly living expenses</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p1_location<span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>p2_location<span class="token punctuation">;</span><span class="token keyword">reg</span> p1_sleep<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the sleep state of player1: if it's 1, player1 will skip his next turn.</span><span class="token keyword">reg</span> p2_sleep<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the sleep state of player1: if it's 1, player2 will skip his next turn.</span><span class="token comment" spellcheck="true">//initialization</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    yes <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    no <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dice <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    global_state <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    state <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>     has_house <span class="token operator">&lt;=</span> <span class="token number">20'b0</span><span class="token punctuation">;</span>    land_owner <span class="token operator">&lt;=</span> <span class="token number">40'b0</span><span class="token punctuation">;</span>    move_delay <span class="token operator">&lt;=</span> <span class="token number">24'b0</span><span class="token punctuation">;</span>    step <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>    rand_delay <span class="token operator">&lt;=</span> <span class="token number">24'b0</span><span class="token punctuation">;</span>    randing <span class="token operator">&lt;=</span> <span class="token number">4'b0</span><span class="token punctuation">;</span>    gpa_delay <span class="token operator">=</span><span class="token number">24'b0</span><span class="token punctuation">;</span>    gpa_rand <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>    show_event <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>    p1_money <span class="token operator">&lt;=</span> <span class="token number">20'd5000</span><span class="token punctuation">;</span>    p2_money <span class="token operator">&lt;=</span> <span class="token number">20'd5000</span><span class="token punctuation">;</span>    p1_gpa <span class="token operator">&lt;=</span> <span class="token number">8'd36</span><span class="token punctuation">;</span>    p2_gpa <span class="token operator">&lt;=</span> <span class="token number">8'd36</span><span class="token punctuation">;</span>    p1_salary <span class="token operator">&lt;=</span> <span class="token number">20'd2000</span><span class="token punctuation">;</span>    p2_salary <span class="token operator">&lt;=</span> <span class="token number">20'd2000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Every player has 3.6gpa, 5000 money and 2000 salary at the beginning of the game.</span>    p1_location <span class="token operator">&lt;=</span> <span class="token number">5'b0</span><span class="token punctuation">;</span>    p2_location <span class="token operator">&lt;=</span> <span class="token number">5'b0</span><span class="token punctuation">;</span>    p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">//GAME</span><span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token comment" spellcheck="true">//if reset is 1, then initialize the game again and set the global_state and state to 0</span>        <span class="token function">if</span><span class="token punctuation">(</span>reset <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>             global_state <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            state <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            has_house <span class="token operator">&lt;=</span> <span class="token number">20'b0</span><span class="token punctuation">;</span>            land_owner <span class="token operator">&lt;=</span> <span class="token number">40'b0</span><span class="token punctuation">;</span>            move_delay <span class="token operator">&lt;=</span> <span class="token number">24'b0</span><span class="token punctuation">;</span>            step <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>            rand_delay <span class="token operator">&lt;=</span> <span class="token number">24'b0</span><span class="token punctuation">;</span>            randing <span class="token operator">&lt;=</span> <span class="token number">4'b0</span><span class="token punctuation">;</span>            gpa_delay <span class="token operator">&lt;=</span> <span class="token number">24'b0</span><span class="token punctuation">;</span>            gpa_rand <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>            show_event <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>            p1_money <span class="token operator">&lt;=</span> <span class="token number">20'd5000</span><span class="token punctuation">;</span>            p2_money <span class="token operator">&lt;=</span> <span class="token number">20'd5000</span><span class="token punctuation">;</span>            p1_gpa <span class="token operator">&lt;=</span> <span class="token number">8'd36</span><span class="token punctuation">;</span>            p2_gpa <span class="token operator">&lt;=</span> <span class="token number">8'd36</span><span class="token punctuation">;</span>            p1_salary <span class="token operator">&lt;=</span> <span class="token number">20'd2000</span><span class="token punctuation">;</span>            p2_salary <span class="token operator">&lt;=</span> <span class="token number">20'd2000</span><span class="token punctuation">;</span>            p1_location <span class="token operator">&lt;=</span> <span class="token number">5'b0</span><span class="token punctuation">;</span>            p2_location <span class="token operator">&lt;=</span> <span class="token number">5'b0</span><span class="token punctuation">;</span>            p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//or else begin the game</span>        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>             <span class="token comment" spellcheck="true">//global_state = 0, show the start picture and you need to press "yes" button to begin the game</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>global_state <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>yes <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                    global_state <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token comment" spellcheck="true">//global_state = 2, show the game over picture, if you want to start a new game, just press the "reset" button</span>            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>global_state <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                global_state <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//global_state = 1 which represents the game-going state, you can enjoy the game</span>            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                    <span class="token function">case</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//state = 0, the stand-by state</span>                    <span class="token number">3'b000</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                            <span class="token comment" spellcheck="true">//we control all the data in the legal range</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_gpa <span class="token operator">></span> <span class="token number">8'd50</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                    p1_gpa <span class="token operator">&lt;=</span> <span class="token number">8'd50</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span>                             <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_gpa <span class="token operator">></span> <span class="token number">8'd50</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                    p2_gpa <span class="token operator">&lt;=</span> <span class="token number">8'd50</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span>                             <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_money <span class="token operator">></span> <span class="token number">20'd88888</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                    p1_money <span class="token operator">&lt;=</span> <span class="token number">20'd88888</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_money <span class="token operator">></span> <span class="token number">20'd88888</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                    p2_money <span class="token operator">&lt;=</span> <span class="token number">20'd88888</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span>                                 <span class="token comment" spellcheck="true">//if one's gpa is lower than 1.5 or money lower than 0, then game over, and change the state to 7</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_gpa <span class="token operator">&lt;</span> <span class="token number">8'd15</span> <span class="token operator">||</span> p2_gpa <span class="token operator">&lt;</span> <span class="token number">8'd15</span> <span class="token operator">||</span> p1_money <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> p2_money <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token operator">||</span>p1_money <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> p2_money <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                    state <span class="token operator">&lt;=</span> <span class="token number">3'b111</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span>                            <span class="token comment" spellcheck="true">//the current player roll the dice to change the state</span>                            <span class="token function">if</span><span class="token punctuation">(</span>dice <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    state <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>turn <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">3'b001</span> <span class="token punctuation">:</span> <span class="token number">3'b010</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span>                        <span class="token keyword">end</span>                    <span class="token comment" spellcheck="true">//state = 1, player1 moves</span>                    <span class="token number">3'b001</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                            <span class="token comment" spellcheck="true">//calculate the time inteval</span>                            <span class="token function">if</span><span class="token punctuation">(</span>step <span class="token operator">==</span> <span class="token number">4'b1111</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    step <span class="token operator">&lt;=</span> rand_num<span class="token punctuation">;</span>                                    rand_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                    randing <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span> randing <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>                                    <span class="token function">if</span><span class="token punctuation">(</span>rand_delay <span class="token operator">!=</span> <span class="token number">24'hffffff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                        rand_delay <span class="token operator">&lt;=</span> rand_delay <span class="token operator">+</span> <span class="token number">24'h000001</span><span class="token punctuation">;</span>                                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                        randing <span class="token operator">&lt;=</span> randing <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                        rand_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                        numberInArduino <span class="token operator">&lt;=</span> <span class="token operator">{</span><span class="token number">12'b1100_0001_0000</span><span class="token punctuation">,</span> rand_num <span class="token operator">}</span><span class="token punctuation">;</span>                                        <span class="token function">if</span><span class="token punctuation">(</span>randing <span class="token operator">==</span> <span class="token number">4'b0001</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                            numberInArduino <span class="token operator">&lt;=</span> <span class="token operator">{</span><span class="token number">12'b1100_0001_0000</span><span class="token punctuation">,</span> step <span class="token operator">}</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span>                                    <span class="token keyword">end</span>                            <span class="token comment" spellcheck="true">//player1 moves</span>                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>move_delay <span class="token operator">!=</span> <span class="token number">24'hffffff</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>                                    move_delay <span class="token operator">&lt;=</span> move_delay <span class="token operator">+</span> <span class="token number">24'h000001</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span> <span class="token comment" spellcheck="true">//step and p1_location don't refresh in time, so when it comes to judgement, the data should +1.</span>                                    move_delay <span class="token operator">&lt;=</span> <span class="token number">24'h0</span><span class="token punctuation">;</span>                                    p1_location <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>p1_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">;</span>                                    step <span class="token operator">&lt;=</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">//if player1 come by the origin square, he gets the monthly living expenses</span>                                    <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'd19</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>                                        p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> p1_salary<span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                     <span class="token comment" spellcheck="true">//when step = 1, the player1 stops and then change game state according to his current position</span>                                    <span class="token function">if</span><span class="token punctuation">(</span> step <span class="token operator">==</span> <span class="token number">4'b0001</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                        step <span class="token operator">&lt;=</span><span class="token number">4'b1111</span><span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">//player1 stays on a red squre</span>                                        <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                            state <span class="token operator">&lt;=</span> <span class="token number">3'b011</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">//player1 stays on an event square     </span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span>p1_location <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">||</span> p1_location <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">||</span> p1_location <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> p1_location <span class="token operator">==</span> <span class="token number">13</span> <span class="token operator">||</span>p1_location <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            state <span class="token operator">&lt;=</span> <span class="token number">3'b100</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//player1 stays on a land square</span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p1_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                            <span class="token keyword">if</span> <span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token punctuation">(</span>p1_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                state <span class="token operator">&lt;=</span> <span class="token number">3'b101</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//decide the next turn by checking the sleep state of both players</span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//judge if the game ends or not</span>                                            <span class="token keyword">end</span>                                        <span class="token comment" spellcheck="true">//player1 stays on player2's land</span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                            state <span class="token operator">&lt;=</span> <span class="token number">3'b110</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span>                                    <span class="token keyword">end</span>                            <span class="token keyword">end</span>                        <span class="token keyword">end</span>                    <span class="token comment" spellcheck="true">//state = 2, player2 moves</span>                    <span class="token number">3'b010</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                            <span class="token comment" spellcheck="true">//calculate the time inteval</span>                            <span class="token function">if</span><span class="token punctuation">(</span>step <span class="token operator">==</span> <span class="token number">4'b1111</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    step <span class="token operator">&lt;=</span> rand_num<span class="token punctuation">;</span>                                    rand_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                    randing <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span> randing <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>                                    <span class="token function">if</span><span class="token punctuation">(</span>rand_delay <span class="token operator">!=</span> <span class="token number">24'hffffff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                        rand_delay <span class="token operator">&lt;=</span> rand_delay <span class="token operator">+</span> <span class="token number">24'h000001</span><span class="token punctuation">;</span>                                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                        randing <span class="token operator">&lt;=</span> randing <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                        rand_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                        numberInArduino <span class="token operator">&lt;=</span> <span class="token operator">{</span><span class="token number">12'b1100_0010_0000</span><span class="token punctuation">,</span>rand_num <span class="token operator">}</span><span class="token punctuation">;</span>                                        <span class="token function">if</span><span class="token punctuation">(</span>randing <span class="token operator">==</span> <span class="token number">4'b0001</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                            numberInArduino <span class="token operator">&lt;=</span> <span class="token operator">{</span><span class="token number">12'b1100_0010_0000</span><span class="token punctuation">,</span> step <span class="token operator">}</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span>                                    <span class="token keyword">end</span>                            <span class="token comment" spellcheck="true">//player2 moves</span>                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>move_delay <span class="token operator">!=</span> <span class="token number">24'hffffff</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span><span class="token comment" spellcheck="true">// p2 move</span>                                    move_delay <span class="token operator">&lt;=</span> move_delay <span class="token operator">+</span> <span class="token number">24'h000001</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span> <span class="token comment" spellcheck="true">//step and p2_location don't refresh in time, so when it comes to judgement, the data should +1.</span>                                    move_delay <span class="token operator">&lt;=</span> <span class="token number">24'h0</span><span class="token punctuation">;</span>                                    p2_location <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>p2_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">;</span>                                    step <span class="token operator">&lt;=</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">//if player2 come by the origin square, he gets the monthly living expenses</span>                                    <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'd19</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>                                        p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> p2_salary<span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                    <span class="token comment" spellcheck="true">//when step = 1, the player2 stops and then change game state according to his current position</span>                                    <span class="token function">if</span><span class="token punctuation">(</span> step <span class="token operator">==</span> <span class="token number">4'b0001</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                        step <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">//player2 stays on a red squre</span>                                        <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                            state <span class="token operator">&lt;=</span> <span class="token number">3'b011</span><span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">//player2 stays on an event square  </span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span> p2_location <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">||</span> p2_location <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">||</span> p2_location <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> p2_location <span class="token operator">==</span> <span class="token number">13</span> <span class="token operator">||</span>p2_location <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            state <span class="token operator">&lt;=</span> <span class="token number">3'b100</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">//player2 stays on a land square</span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p2_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                            <span class="token keyword">if</span> <span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token punctuation">(</span>p2_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                state <span class="token operator">&lt;=</span> <span class="token number">3'b101</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//decide the next turn by checking the sleep state of both players</span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//judge if the game ends or not</span>                                            <span class="token keyword">end</span>                                        <span class="token comment" spellcheck="true">//player2 stays on player1's land</span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                            state <span class="token operator">&lt;=</span> <span class="token number">3'b110</span><span class="token punctuation">;</span>                                         <span class="token keyword">end</span>                                    <span class="token keyword">end</span>                            <span class="token keyword">end</span>                        <span class="token keyword">end</span>                    <span class="token comment" spellcheck="true">//state = 3, executing the event of the red square</span>                    <span class="token number">3'b011</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                            <span class="token comment" spellcheck="true">//checking the turn</span>                            <span class="token comment" spellcheck="true">//it's player1's turn</span>                            <span class="token function">if</span><span class="token punctuation">(</span>turn<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    <span class="token function">case</span><span class="token punctuation">(</span>p1_location<span class="token punctuation">)</span>                                        <span class="token comment" spellcheck="true">//if position = 0, the palyer gets twice his living expenses (because the pass-by state didn't count)</span>                                        <span class="token number">5'd0</span><span class="token punctuation">:</span>  p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> p1_salary<span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">//if position = 5, change the player's sleep state to 1</span>                                        <span class="token number">5'd5</span><span class="token punctuation">:</span>  p1_sleep <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">//if position = 10, the player gets scholarship according to his current gpa</span>                                        <span class="token number">5'd10</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                                                 <span class="token function">if</span><span class="token punctuation">(</span>p1_gpa <span class="token operator">>=</span> <span class="token number">8'd36</span> <span class="token operator">&amp;&amp;</span> p1_gpa <span class="token operator">&lt;</span> <span class="token number">8'd42</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_gpa <span class="token operator">>=</span> <span class="token number">8'd42</span> <span class="token operator">&amp;&amp;</span> p1_gpa <span class="token operator">&lt;</span> <span class="token number">8'd44</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">4000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_gpa <span class="token operator">>=</span> <span class="token number">8'd44</span> <span class="token operator">&amp;&amp;</span> p1_gpa <span class="token operator">&lt;</span> <span class="token number">8'd50</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">6000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_gpa <span class="token operator">>=</span> <span class="token number">8'd46</span> <span class="token operator">&amp;&amp;</span> p1_gpa <span class="token operator">&lt;</span> <span class="token number">8'd50</span> <span class="token operator">&amp;&amp;</span> p1_gpa <span class="token operator">></span> p2_gpa<span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">8000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_gpa <span class="token operator">==</span> <span class="token number">8'd50</span> <span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_money <span class="token operator">&lt;</span> <span class="token number">70000</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                        p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">20000</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                        p1_money <span class="token operator">&lt;=</span> <span class="token number">88888</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                <span class="token keyword">end</span>                                        <span class="token keyword">end</span>                                        <span class="token comment" spellcheck="true">//if position = 15, the player begins his final exam, roll the dice to get his random grade</span>                                        <span class="token number">5'd15</span><span class="token punctuation">:</span>                                             <span class="token comment" spellcheck="true">//to show the rolling numbers</span>                                            <span class="token function">if</span><span class="token punctuation">(</span>gpa_rand <span class="token operator">==</span> <span class="token number">4'b1111</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                gpa_rand <span class="token operator">&lt;=</span> rand_num<span class="token punctuation">;</span>                                                gpa_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                 randing <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span> randing <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>gpa_delay <span class="token operator">!=</span> <span class="token number">24'hffffff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    gpa_delay <span class="token operator">&lt;=</span> gpa_delay <span class="token operator">+</span> <span class="token number">24'h000001</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                    randing <span class="token operator">&lt;=</span> randing <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    gpa_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    numberInArduino <span class="token operator">&lt;={</span><span class="token number">12'b1100_0001_0000</span><span class="token punctuation">,</span>rand_num<span class="token operator">}</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>gpa_rand <span class="token operator">!=</span> <span class="token number">4'b1110</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                numberInArduino <span class="token operator">&lt;={</span><span class="token number">12'b1100_0001_0000</span><span class="token punctuation">,</span> gpa_rand<span class="token operator">}</span><span class="token punctuation">;</span>                                                p1_gpa <span class="token operator">&lt;=</span> p1_gpa <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">+</span> gpa_rand<span class="token punctuation">;</span>                                                gpa_rand <span class="token operator">&lt;=</span> <span class="token number">4'b1110</span><span class="token punctuation">;</span>                                                gpa_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                            <span class="token keyword">end</span>                                    <span class="token keyword">default</span><span class="token punctuation">:</span> state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//change to stand-by state</span>                                    <span class="token keyword">endcase</span>                                               <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                    <span class="token comment" spellcheck="true">//it's player2's turn</span>                                    <span class="token function">case</span><span class="token punctuation">(</span>p2_location<span class="token punctuation">)</span>                                        <span class="token comment" spellcheck="true">//if position = 0, the palyer gets twice his living expenses (because the pass-by state didn't count)</span>                                        <span class="token number">5'b0</span><span class="token punctuation">:</span>  p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> p2_salary<span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">//if position = 5, change the player's sleep state to 1</span>                                        <span class="token number">5'd5</span><span class="token punctuation">:</span>  p2_sleep <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">//if position = 10, the player gets scholarship according to his current gpa</span>                                        <span class="token number">5'd10</span><span class="token punctuation">:</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_gpa <span class="token operator">>=</span> <span class="token number">8'd36</span> <span class="token operator">&amp;&amp;</span> p2_gpa <span class="token operator">&lt;</span> <span class="token number">8'd42</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_gpa <span class="token operator">>=</span> <span class="token number">8'd42</span> <span class="token operator">&amp;&amp;</span> p2_gpa <span class="token operator">&lt;</span> <span class="token number">8'd44</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">4000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_gpa <span class="token operator">>=</span> <span class="token number">8'd44</span> <span class="token operator">&amp;&amp;</span> p2_gpa <span class="token operator">&lt;</span> <span class="token number">8'd50</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">6000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_gpa <span class="token operator">>=</span> <span class="token number">8'd46</span> <span class="token operator">&amp;&amp;</span> p2_gpa <span class="token operator">&lt;</span> <span class="token number">8'd50</span> <span class="token operator">&amp;&amp;</span> p2_gpa <span class="token operator">></span> p1_gpa<span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">8000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_gpa <span class="token operator">==</span> <span class="token number">8'd50</span> <span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_money <span class="token operator">&lt;</span> <span class="token number">70000</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                        p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">20000</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                        p2_money <span class="token operator">&lt;=</span> <span class="token number">88888</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                <span class="token keyword">end</span>                                        <span class="token comment" spellcheck="true">//if position = 15, the player begins his final exam, roll the dice to get his random grade</span>                                        <span class="token number">5'd15</span><span class="token punctuation">:</span>                                                <span class="token comment" spellcheck="true">//to show the rolling numbers</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>gpa_rand <span class="token operator">==</span> <span class="token number">4'b1111</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    gpa_rand <span class="token operator">&lt;=</span> rand_num<span class="token punctuation">;</span>                                                    gpa_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    randing <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span> randing <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>gpa_delay <span class="token operator">!=</span> <span class="token number">24'hffffff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                        gpa_delay <span class="token operator">&lt;=</span> gpa_delay <span class="token operator">+</span> <span class="token number">24'h000001</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                        randing <span class="token operator">&lt;=</span> randing <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                        gpa_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                        numberInArduino <span class="token operator">&lt;={</span><span class="token number">12'b1100_0010_0000</span><span class="token punctuation">,</span>rand_num<span class="token operator">}</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>gpa_rand <span class="token operator">!=</span> <span class="token number">4'b1110</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    numberInArduino <span class="token operator">&lt;={</span><span class="token number">12'b1100_0010_0000</span><span class="token punctuation">,</span> gpa_rand<span class="token operator">}</span><span class="token punctuation">;</span>                                                    p2_gpa <span class="token operator">&lt;=</span> p2_gpa <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">+</span> gpa_rand<span class="token punctuation">;</span>                                                    gpa_rand <span class="token operator">&lt;=</span> <span class="token number">4'b1110</span><span class="token punctuation">;</span>                                                    gpa_delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                        <span class="token keyword">default</span><span class="token punctuation">:</span> state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//change to stand-by state</span>                                    <span class="token keyword">endcase</span>                            <span class="token keyword">end</span>                            <span class="token comment" spellcheck="true">//set gpa_rand to its default and decide the next turn by checking the sleep state of both players</span>                            <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gpa_rand <span class="token operator">==</span> <span class="token number">4'b1110</span>  <span class="token operator">||</span> gpa_rand <span class="token operator">==</span> <span class="token number">4'b1111</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> yes <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    gpa_rand <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>                                    turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                    <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                        turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                        p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                    <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                        turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                        p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                    state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span>                        <span class="token keyword">end</span>                    <span class="token comment" spellcheck="true">//state = 4, executing the random event</span>                    <span class="token number">3'b100</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                            <span class="token comment" spellcheck="true">//get the random event</span>                            <span class="token function">if</span><span class="token punctuation">(</span>show_event <span class="token operator">==</span> <span class="token number">4'b1111</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                show_event <span class="token operator">&lt;=</span> rand_num<span class="token punctuation">;</span>                                <span class="token function">if</span><span class="token punctuation">(</span>turn <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    <span class="token function">case</span><span class="token punctuation">(</span>rand_num<span class="token punctuation">)</span>                                        <span class="token number">4'b0001</span><span class="token punctuation">:</span>p1_gpa <span class="token operator">&lt;=</span> p1_gpa <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>                                        <span class="token number">4'b0010</span><span class="token punctuation">:</span>p1_gpa <span class="token operator">&lt;=</span> p1_gpa <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>                                        <span class="token number">4'b0011</span><span class="token punctuation">:</span><span class="token function">if</span><span class="token punctuation">(</span>p1_money <span class="token operator">></span> <span class="token number">3000</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">-</span> <span class="token number">3000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                    p1_money <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                         <span class="token number">4'b0100</span><span class="token punctuation">:</span>p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">;</span>                                        <span class="token number">4'b0101</span><span class="token punctuation">:</span>p1_salary <span class="token operator">&lt;=</span> p1_salary <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>                                        <span class="token number">4'b0110</span><span class="token punctuation">:</span><span class="token function">if</span><span class="token punctuation">(</span>p1_salary <span class="token operator">></span> <span class="token number">1200</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    p1_salary <span class="token operator">&lt;=</span> p1_salary <span class="token operator">-</span> <span class="token number">1200</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                    p1_salary <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                 <span class="token keyword">end</span>                                     <span class="token keyword">default</span><span class="token punctuation">:</span> show_event <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>                                      <span class="token keyword">endcase</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     <span class="token function">case</span><span class="token punctuation">(</span>rand_num<span class="token punctuation">)</span>                                        <span class="token number">4'b0001</span><span class="token punctuation">:</span>p2_gpa <span class="token operator">&lt;=</span> p2_gpa <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>                                        <span class="token number">4'b0010</span><span class="token punctuation">:</span>p2_gpa <span class="token operator">&lt;=</span> p2_gpa <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>                                        <span class="token number">4'b0011</span><span class="token punctuation">:</span><span class="token function">if</span><span class="token punctuation">(</span>p2_money <span class="token operator">></span> <span class="token number">3000</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">-</span> <span class="token number">3000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                    p2_money <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                         <span class="token number">4'b0100</span><span class="token punctuation">:</span>p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">;</span>                                        <span class="token number">4'b0101</span><span class="token punctuation">:</span>p2_salary <span class="token operator">&lt;=</span> p2_salary <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>                                        <span class="token number">4'b0110</span><span class="token punctuation">:</span><span class="token function">if</span><span class="token punctuation">(</span>p2_salary <span class="token operator">></span> <span class="token number">1200</span> <span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    p2_salary <span class="token operator">&lt;=</span> p2_salary <span class="token operator">-</span> <span class="token number">1200</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                    p2_salary <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                 <span class="token keyword">end</span>                                      <span class="token keyword">default</span><span class="token punctuation">:</span> show_event <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>                                      <span class="token keyword">endcase</span>                                <span class="token keyword">end</span>                            <span class="token keyword">end</span>                             <span class="token comment" spellcheck="true">//press "yes" and decide the next turn by checking the sleep state of both players</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>yes <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                 show_event <span class="token operator">&lt;=</span> <span class="token number">4'b1111</span><span class="token punctuation">;</span>                                turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                    p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                <span class="token keyword">end</span>                                <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                        turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                        p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                <span class="token keyword">end</span>                                state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span>                            <span class="token keyword">end</span>                     <span class="token comment" spellcheck="true">//state = 5, the player can buy an empty land or build houses on his land to charge higher toll</span>                    <span class="token number">3'b101</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                            <span class="token function">if</span><span class="token punctuation">(</span>turn <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                        <span class="token comment" spellcheck="true">//if the land doesn't belong to anyone yet, the player can choose to buy the land or not</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p1_location<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_money <span class="token operator">&lt;</span> <span class="token number">1600</span><span class="token punctuation">)</span> <span class="token keyword">begin</span> <span class="token comment" spellcheck="true">//if the player's money is less than 1600, then he cannot afford the land</span>                                                turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                        turn <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>                                                        p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">//press "yes" to buy the land and change the land state</span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>yes <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                land_owner<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p1_location<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                land_owner<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p1_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">-</span> <span class="token number">1600</span><span class="token punctuation">;</span>                                                turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                        turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                        p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//press "no" and decide the next turn by checking the sleep state of both players   </span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>no <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                                                             <span class="token keyword">end</span>                                        <span class="token comment" spellcheck="true">//if the land belongs to the player, the player can choose to build the house or not</span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_money <span class="token operator">&lt;</span> <span class="token number">1200</span><span class="token punctuation">)</span> <span class="token keyword">begin</span> <span class="token comment" spellcheck="true">//if the player's money is less than 1200, then he cannot afford the house</span>                                                turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//press "yes" to build the house and change the house state</span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>yes <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                has_house<span class="token punctuation">[</span>p1_location<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">-</span> <span class="token number">1200</span><span class="token punctuation">;</span>                                                turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//press "no" and decide the next turn by checking the sleep state of both players      </span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>no <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                        turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                        p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                                state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                                                             <span class="token keyword">end</span>                                                                <span class="token keyword">end</span>                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                        <span class="token comment" spellcheck="true">//if the land doesn't belong to anyone yet, the player can choose to buy the land or not</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p2_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_money <span class="token operator">&lt;</span> <span class="token number">1600</span><span class="token punctuation">)</span> <span class="token keyword">begin</span><span class="token comment" spellcheck="true">//if the player's money is less than 1600, then he cannot afford the land</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                        turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                        p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                            turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                            p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                                 <span class="token comment" spellcheck="true">//press "yes" to buy the land and change the land state</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>yes <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    land_owner<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p2_location<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    land_owner<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p2_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">-</span> <span class="token number">1600</span><span class="token punctuation">;</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                        turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                        p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                            turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                            p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                                  <span class="token comment" spellcheck="true">//press "no" and decide the next turn by checking the sleep state of both players     </span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>no <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                        turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                        p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                            turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                            p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                                <span class="token keyword">end</span>                                           <span class="token comment" spellcheck="true">//if the land belongs to the player, the player can choose to build the house or not                             </span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                                <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_money <span class="token operator">&lt;</span> <span class="token number">1200</span><span class="token punctuation">)</span> <span class="token keyword">begin</span> <span class="token comment" spellcheck="true">//if the player's money is less than 1200, then he cannot afford the house</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                        turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                        p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                            turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                            p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                                 <span class="token comment" spellcheck="true">//press "yes" to build the house and change the house state</span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>yes <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    has_house<span class="token punctuation">[</span>p2_location<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">-</span> <span class="token number">1200</span><span class="token punctuation">;</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                        turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                        p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                            turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                            p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                                 <span class="token comment" spellcheck="true">//press "no" and decide the next turn by checking the sleep state of both players     </span>                                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>no <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                                    turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                        turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                        p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                                            turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                            p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span>                                                    state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                                                                                 <span class="token keyword">end</span>                                                                <span class="token keyword">end</span>                            <span class="token keyword">end</span>                                           <span class="token keyword">end</span>                    <span class="token comment" spellcheck="true">//state = 6, the palyer stays on another player's land and needs to pay the toll</span>                    <span class="token number">3'b110</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                            <span class="token comment" spellcheck="true">//check the turn to decide which player pays to another</span>                            <span class="token function">if</span><span class="token punctuation">(</span>turn <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    <span class="token comment" spellcheck="true">//if there is a house, the price is higher</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>has_house<span class="token punctuation">[</span>p1_location<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_money <span class="token operator">&lt;</span> <span class="token number">4000</span> <span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            p1_money <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                            p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">4000</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                            p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">-</span> <span class="token number">4000</span><span class="token punctuation">;</span>                                            p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">4000</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_gpa <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            p1_gpa <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span>  <span class="token keyword">begin</span>                                            p1_gpa <span class="token operator">&lt;=</span> p1_gpa <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span>                                    <span class="token comment" spellcheck="true">//if there is no house, the price is lower</span>                                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_money <span class="token operator">&lt;</span> <span class="token number">2000</span> <span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            p1_money <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                            p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">;</span>                                         <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                            p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">-</span> <span class="token number">2000</span><span class="token punctuation">;</span>                                             p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">;</span>                                         <span class="token keyword">end</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1_gpa <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            p1_gpa <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span>  <span class="token keyword">begin</span>                                            p1_gpa <span class="token operator">&lt;=</span> p1_gpa <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span>                                    <span class="token keyword">end</span>                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                    <span class="token comment" spellcheck="true">//if there is a house, the price is higher</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>has_house<span class="token punctuation">[</span>p2_location<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_money <span class="token operator">&lt;</span> <span class="token number">4000</span> <span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            p2_money <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                            p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">4000</span><span class="token punctuation">;</span>                                         <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                            p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">-</span> <span class="token number">4000</span><span class="token punctuation">;</span>                                             p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">4000</span><span class="token punctuation">;</span>                                         <span class="token keyword">end</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_gpa <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            p2_gpa <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span>  <span class="token keyword">begin</span>                                            p2_gpa <span class="token operator">&lt;=</span> p2_gpa <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span>                                    <span class="token comment" spellcheck="true">//if there is no house, the price is lower</span>                                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_money <span class="token operator">&lt;</span> <span class="token number">2000</span> <span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            p2_money <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                            p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">;</span>                                         <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                            p2_money <span class="token operator">&lt;=</span> p2_money <span class="token operator">-</span> <span class="token number">2000</span><span class="token punctuation">;</span>                                             p1_money <span class="token operator">&lt;=</span> p1_money <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">;</span>                                         <span class="token keyword">end</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2_gpa <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                            p2_gpa <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span> <span class="token keyword">else</span>  <span class="token keyword">begin</span>                                            p2_gpa <span class="token operator">&lt;=</span> p2_gpa <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                        <span class="token keyword">end</span>                                    <span class="token keyword">end</span>                            <span class="token keyword">end</span>                            <span class="token comment" spellcheck="true">//decide the next turn by checking the sleep state of both players</span>                            turn <span class="token operator">&lt;=</span> <span class="token operator">~</span>turn<span class="token punctuation">;</span>                            <span class="token function">if</span><span class="token punctuation">(</span>p1_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                turn <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                p1_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span>                            <span class="token function">if</span><span class="token punctuation">(</span>p2_sleep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    turn <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                    p2_sleep <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token keyword">end</span>                            state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                        <span class="token keyword">end</span>                    <span class="token comment" spellcheck="true">//state = 7, change the global_state to 2 and game over</span>                    <span class="token number">3'b111</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                        numberInArduino <span class="token operator">&lt;=</span><span class="token number">16'hffff</span><span class="token punctuation">;</span>                        global_state <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                         <span class="token keyword">default</span><span class="token punctuation">:</span> state <span class="token operator">&lt;=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                    <span class="token keyword">endcase</span>             <span class="token keyword">end</span>        <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//Disp number in SWORD</span>BCD_8 <span class="token function">BCD1_gpa</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">binary</span><span class="token punctuation">(</span>p1_gpa<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">bcd</span><span class="token punctuation">(</span>p1_gpa_bcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BCD_8 <span class="token function">BCD2_gpa</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">binary</span><span class="token punctuation">(</span>p2_gpa<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">bcd</span><span class="token punctuation">(</span>p2_gpa_bcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BCD_20 <span class="token function">BCD1_money</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">binary</span><span class="token punctuation">(</span>p1_money<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">bcd</span><span class="token punctuation">(</span>p1_money_bcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BCD_20 <span class="token function">BCD2_money</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">binary</span><span class="token punctuation">(</span>p2_money<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">bcd</span><span class="token punctuation">(</span>p2_money_bcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assign</span> numberInSWORD <span class="token operator">=</span> <span class="token punctuation">(</span>turn <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">{</span>p1_gpa_bcd<span class="token punctuation">,</span><span class="token number">4'b0</span><span class="token punctuation">,</span>p1_money_bcd<span class="token operator">}</span> <span class="token punctuation">:</span> <span class="token operator">{</span>p2_gpa_bcd<span class="token punctuation">,</span><span class="token number">4'b0</span><span class="token punctuation">,</span>p2_money_bcd<span class="token operator">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//handle ps2 code</span><span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sw_input <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ps2_data_cur<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">begin</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps2_data_cur<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8'h69</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                dice <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ps2_data_cur<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8'h72</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                yes <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ps2_data_cur<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8'h7a</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                no <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ps2_data_cur<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8'h1C</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                dice <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ps2_data_cur<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8'h1B</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                yes <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ps2_data_cur<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8'h23</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                no <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                    yes <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    no <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    dice <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token comment" spellcheck="true">// case(ps2_data_cur[7:0])</span>            <span class="token comment" spellcheck="true">//     8'h69:dice &lt;= 1;</span>            <span class="token comment" spellcheck="true">//     8'h72:yes &lt;= 1;</span>            <span class="token comment" spellcheck="true">//     8'h7a:no &lt;= 1;</span>            <span class="token comment" spellcheck="true">//     default:begin</span>            <span class="token comment" spellcheck="true">//         yes &lt;= 0;</span>            <span class="token comment" spellcheck="true">//         no &lt;= 0;</span>            <span class="token comment" spellcheck="true">//         dice &lt;= 0;</span>            <span class="token comment" spellcheck="true">//     end</span>            <span class="token comment" spellcheck="true">// endcase</span>        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>            yes <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            no <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            dice <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>        yes <span class="token operator">&lt;=</span> yes_AJ<span class="token punctuation">;</span>        no <span class="token operator">&lt;=</span> no_AJ<span class="token punctuation">;</span>        dice <span class="token operator">&lt;=</span> dice_AJ<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">//ROM address </span><span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>     game_over_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    house_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    player1_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    player2_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    event1_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    event2_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    event3_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    event4_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    event5_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    event6_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    background_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10'd320</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    start_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10'd320</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>global_state <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">140</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">500</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">210</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">270</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        game_over_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">210</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">360</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>show_event<span class="token operator">!=</span><span class="token number">4'b1111</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">440</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">150</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">330</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>show_event<span class="token punctuation">)</span>            <span class="token number">4'b0001</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                event1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">120</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4'b0010</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                event2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">120</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4'b0011</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                event3_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">120</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4'b0100</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                event4_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">120</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4'b0101</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                event5_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">120</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4'b0110</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                event6_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">120</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                    event1_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    event2_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    event3_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    event4_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    event5_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    event6_data_addr <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">96</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">144</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        house_data_addr <span class="token operator">&lt;=</span> y_pos <span class="token operator">*</span> <span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">229</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">277</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        house_data_addr <span class="token operator">&lt;=</span> y_pos <span class="token operator">*</span> <span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">229</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">362</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">410</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        house_data_addr <span class="token operator">&lt;=</span> y_pos <span class="token operator">*</span> <span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">362</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">589</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">637</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">165</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">213</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        house_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">165</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">589</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">589</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">637</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">259</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">307</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        house_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">259</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">589</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>        <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">362</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">410</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">428</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">476</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        house_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">428</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">362</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">229</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">277</span> <span class="token operator">&amp;&amp;</span>  y_pos <span class="token operator">>=</span> <span class="token number">428</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">476</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        house_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">428</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">229</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">51</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">259</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">307</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        house_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">259</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">51</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">165</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">213</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        house_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">165</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">51</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">71</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">119</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        house_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">71</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">54</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">102</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">187</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">235</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">187</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">320</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">368</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00100</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">453</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">501</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">453</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00101</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00110</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">96</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00111</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">142</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">190</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">142</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">236</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">284</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">236</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">330</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">378</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">330</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">453</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">501</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">453</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01100</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">320</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">368</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01101</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">187</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">235</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">187</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01110</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">54</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">102</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01111</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b10000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">330</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">378</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">330</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b10001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">236</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">284</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">236</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b10010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">142</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">190</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">142</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b10011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">96</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        player1_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>                <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">54</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">139</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">187</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">139</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">272</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">320</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">405</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">453</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">405</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00100</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">538</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">538</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00101</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00110</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">94</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">142</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">94</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00111</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">188</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">236</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">188</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">282</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">330</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">282</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">376</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">376</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">586</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">538</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">538</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01100</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">405</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">453</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">405</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01101</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">272</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">320</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">272</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01110</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">139</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">187</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">139</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01111</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b10000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">376</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">376</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b10001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">282</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">330</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">282</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b10010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">188</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">236</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">188</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b10011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">94</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">142</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            player2_data_addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">94</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token operator">+</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>   <span class="token keyword">end</span><span class="token comment" spellcheck="true">//choose display data</span><span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>VGA_rdn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">640</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">480</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">case</span><span class="token punctuation">(</span>global_state<span class="token punctuation">)</span>            <span class="token number">3'b000</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                    display_data <span class="token operator">&lt;=</span> start_data<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b001</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">54</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">102</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">187</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">235</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">320</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">368</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00100</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">453</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">501</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00101</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                                             <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00110</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">96</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b00111</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">142</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">190</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">236</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">284</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">330</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">378</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">453</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">501</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01100</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">320</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">368</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01101</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">187</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">235</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01110</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">54</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">102</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                                                                                                                                                                                                              <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b01111</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b10000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">330</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">378</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b10001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">236</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">284</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b10010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">142</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">190</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p1_location <span class="token operator">==</span> <span class="token number">5'b10011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">96</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player1_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player1_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">54</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">139</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">187</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">272</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">320</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">405</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">453</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00100</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">538</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00101</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                                           <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00110</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">94</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">142</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b00111</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">188</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">236</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">282</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">330</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">376</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">634</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">538</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">586</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01100</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">405</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">453</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01101</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">272</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">320</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01110</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">139</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">187</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                                                                                                                                                                                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b01111</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">424</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">472</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b10000</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">376</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">424</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b10001</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">282</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">330</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b10010</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">188</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">236</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>p2_location <span class="token operator">==</span> <span class="token number">5'b10011</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">94</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">142</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>player2_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> player2_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                      <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">96</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">144</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span>                <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>house_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> house_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">229</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">277</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span>      <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>house_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> house_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">362</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">410</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span>      <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>house_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> house_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">589</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">637</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">165</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">213</span><span class="token punctuation">)</span>   <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>house_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> house_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">589</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">637</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">259</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">307</span><span class="token punctuation">)</span>   <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>house_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> house_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">362</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">410</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">428</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">476</span><span class="token punctuation">)</span>   <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>house_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> house_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">229</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">277</span> <span class="token operator">&amp;&amp;</span>  y_pos <span class="token operator">>=</span> <span class="token number">428</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">476</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>house_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> house_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">51</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">259</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">307</span><span class="token punctuation">)</span>      <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>house_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> house_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">51</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">165</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">213</span><span class="token punctuation">)</span>      <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>house_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> house_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>has_house<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">51</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">71</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">119</span><span class="token punctuation">)</span>       <span class="token keyword">begin</span>                                <span class="token function">if</span><span class="token punctuation">(</span>house_data <span class="token operator">!=</span> <span class="token number">12'hfff</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> house_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                     display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                <span class="token keyword">end</span>                     <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">||</span>land_owner<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">58</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> land_owner<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">12'hf0f</span> <span class="token punctuation">:</span> <span class="token number">12'hfff</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">||</span>land_owner<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">253</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">253</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">58</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> land_owner<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">12'hf0f</span> <span class="token punctuation">:</span> <span class="token number">12'hfff</span><span class="token punctuation">;</span>                                                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">||</span>land_owner<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">373</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">373</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">58</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> land_owner<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">12'hf0f</span> <span class="token punctuation">:</span> <span class="token number">12'hfff</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">||</span>land_owner<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">576</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">576</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">189</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">189</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> land_owner<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">12'hf0f</span> <span class="token punctuation">:</span> <span class="token number">12'hfff</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">||</span>land_owner<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">576</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">576</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">283</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">283</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> land_owner<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">12'hf0f</span> <span class="token punctuation">:</span> <span class="token number">12'hfff</span><span class="token punctuation">;</span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">||</span>land_owner<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">373</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">373</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">414</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">414</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> land_owner<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">12'hf0f</span> <span class="token punctuation">:</span> <span class="token number">12'hfff</span><span class="token punctuation">;</span>                                            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">||</span>land_owner<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">253</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">253</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">414</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">414</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> land_owner<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">12'hf0f</span> <span class="token punctuation">:</span> <span class="token number">12'hfff</span><span class="token punctuation">;</span>                                                   <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token operator">||</span>land_owner<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">283</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">283</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> land_owner<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">12'hf0f</span> <span class="token punctuation">:</span> <span class="token number">12'hfff</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token operator">||</span>land_owner<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">189</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">189</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> land_owner<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">12'hf0f</span> <span class="token punctuation">:</span> <span class="token number">12'hfff</span><span class="token punctuation">;</span>                              <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>land_owner<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token operator">||</span>land_owner<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_pos <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pos <span class="token operator">-</span> <span class="token number">95</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                                    display_data <span class="token operator">&lt;=</span> land_owner<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">12'hf0f</span> <span class="token punctuation">:</span> <span class="token number">12'hfff</span><span class="token punctuation">;</span>                       <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>show_event<span class="token operator">!=</span><span class="token number">4'b1111</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">440</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">150</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">330</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                                <span class="token keyword">case</span> <span class="token punctuation">(</span>show_event<span class="token punctuation">)</span>                                    <span class="token number">4'b0001</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                                            display_data <span class="token operator">&lt;=</span> event1_data<span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                    <span class="token number">4'b0010</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                                            display_data <span class="token operator">&lt;=</span> event2_data<span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                    <span class="token number">4'b0011</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                                            display_data <span class="token operator">&lt;=</span> event3_data<span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                    <span class="token number">4'b0100</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                                            display_data <span class="token operator">&lt;=</span> event4_data<span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                    <span class="token number">4'b0101</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                                            display_data <span class="token operator">&lt;=</span> event5_data<span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                    <span class="token number">4'b0110</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                                            display_data <span class="token operator">&lt;=</span> event6_data<span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                                            display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                                    <span class="token keyword">end</span>                                <span class="token keyword">endcase</span>                    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                                display_data <span class="token operator">&lt;=</span> background_data<span class="token punctuation">;</span>                    <span class="token keyword">end</span>             <span class="token keyword">end</span>                <span class="token number">3'b010</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x_pos <span class="token operator">>=</span> <span class="token number">140</span> <span class="token operator">&amp;&amp;</span> x_pos <span class="token operator">&lt;</span> <span class="token number">500</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">>=</span> <span class="token number">210</span> <span class="token operator">&amp;&amp;</span> y_pos <span class="token operator">&lt;</span> <span class="token number">270</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                    display_data <span class="token operator">&lt;=</span> game_over_data<span class="token punctuation">;</span>                <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                    display_data <span class="token operator">&lt;=</span> <span class="token number">12'b0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>display_data <span class="token operator">&lt;=</span> <span class="token number">12'b0</span><span class="token punctuation">;</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>        display_data <span class="token operator">&lt;=</span> <span class="token number">12'b0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###二、VGA模块</p><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token keyword">module</span> vgac <span class="token punctuation">(</span>vga_clk<span class="token punctuation">,</span>clrn<span class="token punctuation">,</span>d_in<span class="token punctuation">,</span>row_addr<span class="token punctuation">,</span>col_addr<span class="token punctuation">,</span>rdn<span class="token punctuation">,</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">,</span>hs<span class="token punctuation">,</span>vs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// vgac</span>   <span class="token keyword">input</span>     <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d_in<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// bbbb_gggg_rrrr, pixel</span>   <span class="token keyword">input</span>            vga_clk<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 25MHz</span>   <span class="token keyword">input</span>            clrn<span class="token punctuation">;</span>   <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> row_addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pixel ram row address, 480 (512) lines</span>   <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> col_addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pixel ram col address, 640 (1024) pixels</span>   <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// red, green, blue colors</span>   <span class="token keyword">output</span> <span class="token keyword">reg</span>       rdn<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// read pixel RAM (active_low)</span>   <span class="token keyword">output</span> <span class="token keyword">reg</span>       hs<span class="token punctuation">,</span>vs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// horizontal and vertical synchronization</span>   <span class="token comment" spellcheck="true">// h_count: VGA horizontal counter (0-799)</span>   <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> h_count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// VGA horizontal counter (0-799): pixels</span>   <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> vga_clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clrn<span class="token punctuation">)</span> <span class="token keyword">begin</span>           h_count <span class="token operator">&lt;=</span> <span class="token number">10'h0</span><span class="token punctuation">;</span>       <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h_count <span class="token operator">==</span> <span class="token number">10'd799</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>           h_count <span class="token operator">&lt;=</span> <span class="token number">10'h0</span><span class="token punctuation">;</span>       <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>            h_count <span class="token operator">&lt;=</span> h_count <span class="token operator">+</span> <span class="token number">10'h1</span><span class="token punctuation">;</span>       <span class="token keyword">end</span>   <span class="token keyword">end</span>   <span class="token comment" spellcheck="true">// v_count: VGA vertical counter (0-524)</span>   <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> v_count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// VGA vertical   counter (0-524): lines</span>   <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> vga_clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> clrn<span class="token punctuation">)</span> <span class="token keyword">begin</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clrn<span class="token punctuation">)</span> <span class="token keyword">begin</span>           v_count <span class="token operator">&lt;=</span> <span class="token number">10'h0</span><span class="token punctuation">;</span>       <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h_count <span class="token operator">==</span> <span class="token number">10'd799</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>v_count <span class="token operator">==</span> <span class="token number">10'd524</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>               v_count <span class="token operator">&lt;=</span> <span class="token number">10'h0</span><span class="token punctuation">;</span>           <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>               v_count <span class="token operator">&lt;=</span> v_count <span class="token operator">+</span> <span class="token number">10'h1</span><span class="token punctuation">;</span>           <span class="token keyword">end</span>       <span class="token keyword">end</span>   <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">// signals, will be latched for outputs</span>    <span class="token keyword">wire</span>  <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> row    <span class="token operator">=</span>  v_count <span class="token operator">-</span> <span class="token number">10'd35</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// pixel ram row addr </span>    <span class="token keyword">wire</span>  <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> col    <span class="token operator">=</span>  h_count <span class="token operator">-</span> <span class="token number">10'd143</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// pixel ram col addr </span>    <span class="token keyword">wire</span>        h_sync <span class="token operator">=</span> <span class="token punctuation">(</span>h_count <span class="token operator">></span> <span class="token number">10'd95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  96 -> 799</span>    <span class="token keyword">wire</span>        v_sync <span class="token operator">=</span> <span class="token punctuation">(</span>v_count <span class="token operator">></span> <span class="token number">10'd1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//   2 -> 524</span>    <span class="token keyword">wire</span>        read   <span class="token operator">=</span> <span class="token punctuation">(</span>h_count <span class="token operator">></span> <span class="token number">10'd142</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// 143 -> 782</span>                         <span class="token punctuation">(</span>h_count <span class="token operator">&lt;</span> <span class="token number">10'd783</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">//        640 pixels</span>                         <span class="token punctuation">(</span>v_count <span class="token operator">></span> <span class="token number">10'd34</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">//  35 -> 514</span>                         <span class="token punctuation">(</span>v_count <span class="token operator">&lt;</span> <span class="token number">10'd515</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//        480 lines</span>    <span class="token comment" spellcheck="true">// vga signals</span>    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> vga_clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        row_addr <span class="token operator">&lt;=</span>  row<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pixel ram row address</span>        col_addr <span class="token operator">&lt;=</span>  col<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// pixel ram col address</span>        rdn      <span class="token operator">&lt;=</span> <span class="token operator">~</span>read<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// read pixel (active low)</span>        hs       <span class="token operator">&lt;=</span>  h_sync<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// horizontal synchronization</span>        vs       <span class="token operator">&lt;=</span>  v_sync<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// vertical   synchronization</span>        r        <span class="token operator">&lt;=</span>  rdn <span class="token operator">?</span> <span class="token number">4'h0</span> <span class="token punctuation">:</span> d_in<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3-bit red</span>        g        <span class="token operator">&lt;=</span>  rdn <span class="token operator">?</span> <span class="token number">4'h0</span> <span class="token punctuation">:</span> d_in<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3-bit green</span>        b        <span class="token operator">&lt;=</span>  rdn <span class="token operator">?</span> <span class="token number">4'h0</span> <span class="token punctuation">:</span> d_in<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2-bit blue</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、PS-2模块"><a href="#三、PS-2模块" class="headerlink" title="三、PS/2模块"></a>三、PS/2模块</h3><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">ps2_keyboard</span><span class="token punctuation">(</span><span class="token keyword">input</span> clk<span class="token punctuation">,</span>                <span class="token keyword">input</span> rst<span class="token punctuation">,</span>                <span class="token keyword">input</span> ps2_clk<span class="token punctuation">,</span>                <span class="token keyword">input</span> ps2_data<span class="token punctuation">,</span>                <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data_out<span class="token punctuation">,</span>                <span class="token keyword">output</span> ready<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">reg</span> ps2_clk_flag0<span class="token punctuation">,</span> ps2_clk_flag1<span class="token punctuation">,</span> ps2_clk_flag2<span class="token punctuation">;</span>    <span class="token keyword">wire</span> negedge_ps2_clk<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> rst<span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span><span class="token keyword">begin</span>            ps2_clk_flag0 <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>            ps2_clk_flag1 <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>            ps2_clk_flag2 <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>            ps2_clk_flag0 <span class="token operator">&lt;=</span> ps2_clk<span class="token punctuation">;</span>            ps2_clk_flag1 <span class="token operator">&lt;=</span> ps2_clk_flag0<span class="token punctuation">;</span>            ps2_clk_flag2 <span class="token operator">&lt;=</span> ps2_clk_flag1<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> negedge_ps2_clk <span class="token operator">=</span> <span class="token operator">!</span>ps2_clk_flag1 <span class="token operator">&amp;</span> ps2_clk_flag2<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> num<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> rst<span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span>            num <span class="token operator">&lt;=</span> <span class="token number">4'd0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">4'd11</span><span class="token punctuation">)</span>            num <span class="token operator">&lt;=</span> <span class="token number">4'd0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>negedge_ps2_clk<span class="token punctuation">)</span>            num <span class="token operator">&lt;=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">reg</span> negedge_ps2_clk_shift<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        negedge_ps2_clk_shift <span class="token operator">&lt;=</span> negedge_ps2_clk<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> temp_data<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            temp_data <span class="token operator">&lt;=</span> <span class="token number">8'd0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>negedge_ps2_clk_shift<span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">// receive data</span>            <span class="token function">case</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>                <span class="token number">4'd2</span><span class="token punctuation">:</span> temp_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> ps2_data<span class="token punctuation">;</span>                <span class="token number">4'd3</span><span class="token punctuation">:</span> temp_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> ps2_data<span class="token punctuation">;</span>                <span class="token number">4'd4</span><span class="token punctuation">:</span> temp_data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> ps2_data<span class="token punctuation">;</span>                <span class="token number">4'd5</span><span class="token punctuation">:</span> temp_data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> ps2_data<span class="token punctuation">;</span>                <span class="token number">4'd6</span><span class="token punctuation">:</span> temp_data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> ps2_data<span class="token punctuation">;</span>                <span class="token number">4'd7</span><span class="token punctuation">:</span> temp_data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> ps2_data<span class="token punctuation">;</span>                <span class="token number">4'd8</span><span class="token punctuation">:</span> temp_data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> ps2_data<span class="token punctuation">;</span>                <span class="token number">4'd9</span><span class="token punctuation">:</span> temp_data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> ps2_data<span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span> temp_data <span class="token operator">&lt;=</span> temp_data<span class="token punctuation">;</span>            <span class="token keyword">endcase</span>        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>            temp_data <span class="token operator">&lt;=</span> temp_data<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">reg</span> data_break<span class="token punctuation">,</span> data_done<span class="token punctuation">,</span> data_expand<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>                data_break <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>                data <span class="token operator">&lt;=</span> <span class="token number">10'b0</span><span class="token punctuation">;</span>                data_done <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>                data_expand <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">4'd11</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>temp_data <span class="token operator">==</span> <span class="token number">8'hE0</span><span class="token punctuation">)</span>            data_expand <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// keyboard expand</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp_data <span class="token operator">==</span> <span class="token number">8'hF0</span><span class="token punctuation">)</span>            data_break <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>             data <span class="token operator">&lt;=</span> <span class="token operator">{</span>data_expand<span class="token punctuation">,</span> data_break<span class="token punctuation">,</span> temp_data<span class="token operator">}</span><span class="token punctuation">;</span>            data_done <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>            data_expand <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>            data_break <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>            <span class="token keyword">end</span>     <span class="token keyword">else</span> <span class="token keyword">begin</span>        data <span class="token operator">&lt;=</span> data<span class="token punctuation">;</span>        data_done <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        data_expand <span class="token operator">&lt;=</span> data_expand<span class="token punctuation">;</span>        data_break <span class="token operator">&lt;=</span> data_break<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> data_out <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token keyword">assign</span> ready <span class="token operator">=</span> data_done<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、DispNumber模块"><a href="#四、DispNumber模块" class="headerlink" title="四、DispNumber模块"></a>四、DispNumber模块</h3><pre class="line-numbers language-Verilog"><code class="language-Verilog">//MyMC14495 begin`timescale 1ns / 1psmodule MyMC14495(D0,                 D1,                 D2,                 D3,                 LE,                 point,                 a,                 b,                 c,                 d,                 e,                 f,                 g,                 p);    input D0;    input D1;    input D2;    input D3;    input LE;    input point;    output a;    output b;    output c;    output d;    output e;    output f;    output g;    output p;    wire XLXN_16;    wire XLXN_17;    wire XLXN_18;    wire XLXN_19;    wire XLXN_20;    wire XLXN_21;    wire XLXN_22;    wire XLXN_31;    wire XLXN_32;    wire XLXN_34;    wire XLXN_35;    wire XLXN_36;    wire XLXN_38;    wire XLXN_41;    wire XLXN_42;    wire XLXN_45;    wire XLXN_48;    wire XLXN_49;    wire XLXN_51;    wire XLXN_53;    wire XLXN_64;    wire XLXN_193;    wire XLXN_241;    wire XLXN_245;    wire XLXN_254;    wire XLXN_261;    wire XLXN_262;    wire XLXN_267;    wire XLXN_274;    wire XLXN_277;    wire XLXN_278;    wire XLXN_279;    AND4  AD0 (.I0(XLXN_279),    .I1(XLXN_278),    .I2(D2),    .I3(D3),    .O(XLXN_31));    AND4  AD1 (.I0(D0),    .I1(D1),    .I2(D2),    .I3(XLXN_274),    .O(XLXN_32));    AND3  AD2 (.I0(XLXN_278),    .I1(XLXN_277),    .I2(XLXN_274),    .O(XLXN_64));    AND3  AD3 (.I0(D0),    .I1(D1),    .I2(XLXN_274),    .O(XLXN_34));    AND3  AD4 (.I0(D1),    .I1(XLXN_277),    .I2(XLXN_274),    .O(XLXN_35));    AND3  AD5 (.I0(D0),    .I1(XLXN_277),    .I2(XLXN_274),    .O(XLXN_36));    AND3  AD6 (.I0(D0),    .I1(XLXN_278),    .I2(XLXN_277),    .O(XLXN_38));    AND3  AD7 (.I0(XLXN_278),    .I1(D2),    .I2(XLXN_274),    .O(XLXN_193));    AND2  AD8 (.I0(D0),    .I1(XLXN_274),    .O(XLXN_245));    AND4  AD9 (.I0(XLXN_279),    .I1(D1),    .I2(XLXN_277),    .I3(D3),    .O(XLXN_41));    AND3  AD10 (.I0(D0),    .I1(D1),    .I2(D2),    .O(XLXN_42));    AND3  AD11 (.I0(D1),    .I1(D2),    .I2(D3),    .O(XLXN_45));    AND4  AD12 (.I0(XLXN_279),    .I1(D1),    .I2(XLXN_277),    .I3(XLXN_274),    .O(XLXN_241));    AND3  AD13 (.I0(D0),    .I1(D1),    .I2(D3),    .O(XLXN_48));    AND3  AD14 (.I0(XLXN_279),    .I1(D2),    .I2(D3),    .O(XLXN_49));    AND3  AD15 (.I0(XLXN_279),    .I1(D1),    .I2(D2),    .O(XLXN_254));    AND4  AD16 (.I0(D0),    .I1(XLXN_278),    .I2(D2),    .I3(XLXN_274),    .O(XLXN_51));    AND4  AD17 (.I0(D0),    .I1(D1),    .I2(XLXN_277),    .I3(D3),    .O(XLXN_53));    AND4  AD18 (.I0(D0),    .I1(XLXN_278),    .I2(D2),    .I3(D3),    .O(XLXN_262));    AND4  AD19 (.I0(XLXN_279),    .I1(XLXN_278),    .I2(D2),    .I3(XLXN_274),    .O(XLXN_267));    AND4  AD20 (.I0(D0),    .I1(XLXN_277),    .I2(XLXN_278),    .I3(XLXN_274),    .O(XLXN_261));    OR2  XLXI_1 (.I0(LE),    .I1(XLXN_16),    .O(g));    OR2  XLXI_2 (.I0(LE),    .I1(XLXN_17),    .O(f));    OR2  XLXI_3 (.I0(LE),    .I1(XLXN_18),    .O(e));    OR2  XLXI_4 (.I0(LE),    .I1(XLXN_19),    .O(d));    OR2  XLXI_5 (.I0(LE),    .I1(XLXN_20),    .O(c));    OR2  XLXI_6 (.I0(LE),    .I1(XLXN_21),    .O(b));    OR2  XLXI_8 (.I0(LE),    .I1(XLXN_22),    .O(a));    OR3  XLXI_15 (.I0(XLXN_31),    .I1(XLXN_32),    .I2(XLXN_64),    .O(XLXN_16));    OR3  XLXI_16 (.I0(XLXN_38),    .I1(XLXN_193),    .I2(XLXN_245),    .O(XLXN_18));    OR3  XLXI_17 (.I0(XLXN_45),    .I1(XLXN_241),    .I2(XLXN_49),    .O(XLXN_20));    OR4  XLXI_18 (.I0(XLXN_34),    .I1(XLXN_35),    .I2(XLXN_36),    .I3(XLXN_262),    .O(XLXN_17));    OR4  XLXI_19 (.I0(XLXN_41),    .I1(XLXN_42),    .I2(XLXN_267),    .I3(XLXN_261),    .O(XLXN_19));    OR4  XLXI_20 (.I0(XLXN_48),    .I1(XLXN_49),    .I2(XLXN_254),    .I3(XLXN_51),    .O(XLXN_21));    OR4  XLXI_21 (.I0(XLXN_53),    .I1(XLXN_262),    .I2(XLXN_267),    .I3(XLXN_261),    .O(XLXN_22));    INV  XLXI_23 (.I(point),    .O(p));    INV  XLXI_91 (.I(D3),    .O(XLXN_274));    INV  XLXI_92 (.I(D2),    .O(XLXN_277));    INV  XLXI_102 (.I(D1),    .O(XLXN_278));    INV  XLXI_103 (.I(D0),    .O(XLXN_279));endmodule    //MyMC14495 end//MUX 4 TO 1 4bit begin`timescale 1ns / 1psmodule Mux4to1b4_DispNumber(I0,   I1,   I2,   I3,   S,   O);   input [3:0] I0;   input [3:0] I1;   input [3:0] I2;   input [3:0] I3;   input [1:0] S;   output reg[3:0] O;   always @(*)begin      case({S[1],S[0]})            2'b00 : O = I0;            2'b01 : O = I1;             2'b10 : O = I2;            2'b11 : O = I3;           default: O = I0;      endcase   endendmodule//MUX 4 TO 1 4bit end//MUX 4 TO 1 begin`timescale 1ns / 1psmodule Mux4to1(I0,   I1,   I2,   I3,   S,   O);   input I0;   input I1;   input I2;   input I3;   input [1:0] S;   output reg O;   always @(*)begin         case({S[1],S[0]})            2'b00 : O <= I0;            2'b01 : O <= I1;            2'b10 : O <= I2;            2'b11 : O <= I3;            default:O <= I0;         endcase   endendmodule//MUX 4 TO 1 end`timescale 1ns / 1psmodule clkdiv_DispNumber(input wire clk,      input wire rst,      output reg[31:0] clkdiv      );      //clock divider      always @ (posedge clk or posedge rst) begin         if (rst) clkdiv <= 0;         else clkdiv     <= clkdiv + 1'b1;      endendmodule`timescale  100 ps / 10 psmodule INV4(O0, O1, O2, O3, I0, I1, I2, I3);output O0;output O1;output O2;output O3;input  I0;input  I1;input  I2;input  I3;assign O0 = !I0;assign O1 = !I1;assign O2 = !I2;assign O3 = !I3;endmodule`timescale  100 ps / 10 psmodule D2_4E (D0, D1, D2, D3, A0, A1);output D0;output D1;output D2;output D3;input  A0;input  A1;reg D0;reg D1;reg D2;reg D3;always @(*)begincase({A1,A0})   2'b00 : {D3,D2,D1,D0}  <= 4'b0001;   2'b01 : {D3,D2,D1,D0}  <= 4'b0010;   2'b10 : {D3,D2,D1,D0}  <= 4'b0100;   2'b11 : {D3,D2,D1,D0}  <= 4'b1000;   default: {D3,D2,D1,D0} <= 4'b0000;endcaseendendmodule`timescale 1ns / 1psmodule DisplaySync(Hexs,LES,point,Scan,AN,Hex,LE,p);input [15:0] Hexs;input [3:0] LES;input [3:0] point;input [1:0] Scan;output [3:0] AN;output [3:0] Hex;output LE;output p;wire D0,D1,D2,D3;Mux4to1b4_DispNumber  Mux4to1b4_1 (.I0(Hexs[3:0]),.I1(Hexs[7:4]),.I2(Hexs[11:8]),.I3(Hexs[15:12]),.S(Scan[1:0]),.O(Hex[3:0]));Mux4to1  Mux4to1_1 (.I0(point[0]),.I1(point[1]),.I2(point[2]),.I3(point[3]),.S(Scan[1:0]),.O(p));Mux4to1  Mux4to1_2 (.I0(LES[0]),.I1(LES[1]),.I2(LES[2]),.I3(LES[3]),.S(Scan[1:0]),.O(LE));D2_4E D2_4E_1 (.A0(Scan[0]),.A1(Scan[1]),.D0(D0),.D1(D1),.D2(D2),.D3(D3));INV4  INV4_1 (.I0(D0),.I1(D1),.I2(D2),.I3(D3),.O0(AN[0]),.O1(AN[1]),.O2(AN[2]),.O3(AN[3]));endmodule`timescale 1ns / 1psmodule DispNumber(clk,   HEXS,   LES,   points,   RST,   AN,   Segment   );   input clk;   input [15:0] HEXS;   input [3:0] LES;   input [3:0] points;   input RST;   output [3:0] AN;   output [7:0] Segment;   wire [31:0] clkdiv;   wire [3:0] Hex;   wire LE;   wire p;   DisplaySync DSync_1 (.Hexs(HEXS[15:0]),   .LES(~LES[3:0]),   .point(points[3:0]),   .Scan(clkdiv[18:17]),   .AN(AN[3:0]),   .Hex(Hex[3:0]),   .LE(LE),   .p(p));   MyMC14495  MyMC14495_1 (.D0(Hex[0]),   .D1(Hex[1]),   .D2(Hex[2]),   .D3(Hex[3]),   .LE(LE),   .point(p),   .a(Segment[0]),   .b(Segment[1]),   .c(Segment[2]),   .d(Segment[3]),   .e(Segment[4]),   .f(Segment[5]),   .g(Segment[6]),   .p(Segment[7]));   clkdiv_DispNumber  clkdiv_1 (.clk(clk),   .rst(RST),   .clkdiv(clkdiv[31:0]));endmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、串行数码管驱动"><a href="#五、串行数码管驱动" class="headerlink" title="五、串行数码管驱动"></a>五、串行数码管驱动</h3><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span> <span class="token function">SEG_DRV</span><span class="token punctuation">(</span>               <span class="token keyword">input</span> clk<span class="token punctuation">,</span>               <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>num<span class="token punctuation">,</span>               <span class="token keyword">input</span> ena<span class="token punctuation">,</span>               <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>point<span class="token punctuation">,</span>               <span class="token keyword">output</span> S_DT<span class="token punctuation">,</span>               <span class="token keyword">output</span> S_CLK<span class="token punctuation">,</span>               <span class="token keyword">output</span> S_CLR<span class="token punctuation">,</span>               <span class="token keyword">output</span> S_EN    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>dto<span class="token punctuation">;</span>MC14495 <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">D0</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D1</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D2</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D3</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">LE</span><span class="token punctuation">(</span><span class="token operator">~</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MC14495 <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">D0</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D1</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D2</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D3</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">LE</span><span class="token punctuation">(</span><span class="token operator">~</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MC14495 <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">D0</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D1</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D2</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D3</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">LE</span><span class="token punctuation">(</span><span class="token operator">~</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MC14495 <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">D0</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D1</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D2</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D3</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">LE</span><span class="token punctuation">(</span><span class="token operator">~</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MC14495 <span class="token function">m5</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">D0</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D1</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D2</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D3</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">LE</span><span class="token punctuation">(</span><span class="token operator">~</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MC14495 <span class="token function">m6</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">D0</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D1</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D2</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D3</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">LE</span><span class="token punctuation">(</span><span class="token operator">~</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MC14495 <span class="token function">m7</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">D0</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D1</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D2</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D3</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">LE</span><span class="token punctuation">(</span><span class="token operator">~</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MC14495 <span class="token function">m8</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">D0</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D1</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D2</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">D3</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">LE</span><span class="token punctuation">(</span><span class="token operator">~</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>dto<span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SEG_P2S <span class="token function">m9</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">data_in</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">S_DT</span><span class="token punctuation">(</span>S_DT<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">S_CLK</span><span class="token punctuation">(</span>S_CLK<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">S_CLR</span><span class="token punctuation">(</span>S_CLR<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token function">S_EN</span><span class="token punctuation">(</span>S_EN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、并行转串行模块"><a href="#六、并行转串行模块" class="headerlink" title="六、并行转串行模块"></a>六、并行转串行模块</h3><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span> <span class="token function">SEG_P2S</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>               data_in<span class="token punctuation">,</span>               ena<span class="token punctuation">,</span>               S_DT<span class="token punctuation">,</span>               S_CLK<span class="token punctuation">,</span>               S_CLR<span class="token punctuation">,</span>               S_EN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>    <span class="token keyword">parameter</span> DELAY <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token keyword">input</span> clk<span class="token punctuation">;</span>    <span class="token keyword">input</span> ena<span class="token punctuation">;</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data_in<span class="token punctuation">;</span>    <span class="token keyword">output</span> S_DT<span class="token punctuation">;</span>    <span class="token keyword">output</span> S_CLK<span class="token punctuation">;</span>    <span class="token keyword">output</span> S_CLR<span class="token punctuation">;</span>    <span class="token keyword">output</span> S_EN<span class="token punctuation">;</span>    <span class="token keyword">wire</span> s_clk<span class="token punctuation">,</span>s_data<span class="token punctuation">;</span>    <span class="token keyword">reg</span> out_ena<span class="token punctuation">;</span>    <span class="token keyword">assign</span> S_CLK <span class="token operator">=</span> s_clk<span class="token punctuation">;</span>    <span class="token keyword">assign</span> S_DT  <span class="token operator">=</span> s_data<span class="token punctuation">;</span>    <span class="token keyword">assign</span> S_EN  <span class="token operator">=</span> out_ena<span class="token punctuation">;</span>    <span class="token keyword">assign</span> S_CLR <span class="token operator">=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span>WIDTH<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> shift<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span>DELAY<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> counter <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> s_clk_Ena<span class="token punctuation">;</span>    <span class="token keyword">assign</span> s_clk_Ena <span class="token operator">=</span> <span class="token operator">|</span>shift<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> s_clk     <span class="token operator">=</span> <span class="token operator">~</span>clk <span class="token operator">&amp;&amp;</span> s_clk_Ena<span class="token punctuation">;</span>    <span class="token keyword">assign</span> s_data    <span class="token operator">=</span> shift<span class="token punctuation">[</span>WIDTH<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> ena<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>ena <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>            shift <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            counter <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            out_ena <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s_clk_Ena<span class="token punctuation">)</span>            shift <span class="token operator">&lt;=</span> <span class="token operator">{</span>shift<span class="token punctuation">[</span>WIDTH <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1'b0</span><span class="token operator">}</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token keyword">begin</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>counter<span class="token punctuation">)</span> <span class="token keyword">begin</span>                shift <span class="token operator">&lt;=</span> <span class="token operator">{</span>data_in<span class="token punctuation">,</span> <span class="token number">1'b1</span><span class="token operator">}</span><span class="token punctuation">;</span>                out_ena    <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>                out_ena      <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            counter <span class="token operator">&lt;=</span> counter <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、MC14495模块"><a href="#七、MC14495模块" class="headerlink" title="七、MC14495模块"></a>七、MC14495模块</h3><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token comment" spellcheck="true">//MyMC14495 begin</span><span class="token constant">`timescale</span> <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span>   <span class="token function">MC14495</span><span class="token punctuation">(</span>D0<span class="token punctuation">,</span>                 D1<span class="token punctuation">,</span>                 D2<span class="token punctuation">,</span>                 D3<span class="token punctuation">,</span>                 LE<span class="token punctuation">,</span>                 point<span class="token punctuation">,</span>                 a<span class="token punctuation">,</span>                 b<span class="token punctuation">,</span>                 c<span class="token punctuation">,</span>                 d<span class="token punctuation">,</span>                 e<span class="token punctuation">,</span>                 f<span class="token punctuation">,</span>                 g<span class="token punctuation">,</span>                 p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">input</span> D0<span class="token punctuation">;</span>    <span class="token keyword">input</span> D1<span class="token punctuation">;</span>    <span class="token keyword">input</span> D2<span class="token punctuation">;</span>    <span class="token keyword">input</span> D3<span class="token punctuation">;</span>    <span class="token keyword">input</span> LE<span class="token punctuation">;</span>    <span class="token keyword">input</span> point<span class="token punctuation">;</span>    <span class="token keyword">output</span> a<span class="token punctuation">;</span>    <span class="token keyword">output</span> b<span class="token punctuation">;</span>    <span class="token keyword">output</span> c<span class="token punctuation">;</span>    <span class="token keyword">output</span> d<span class="token punctuation">;</span>    <span class="token keyword">output</span> e<span class="token punctuation">;</span>    <span class="token keyword">output</span> f<span class="token punctuation">;</span>    <span class="token keyword">output</span> g<span class="token punctuation">;</span>    <span class="token keyword">output</span> p<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_16<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_17<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_18<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_19<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_20<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_21<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_22<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_31<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_32<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_34<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_35<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_36<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_38<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_41<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_42<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_45<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_48<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_49<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_51<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_53<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_64<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_193<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_241<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_245<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_254<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_261<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_262<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_267<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_274<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_277<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_278<span class="token punctuation">;</span>    <span class="token keyword">wire</span> XLXN_279<span class="token punctuation">;</span>    AND4  AD0 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_279<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_278<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>D3<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_31<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND4  AD1 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD2 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_278<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_277<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD3 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_34<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD4 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_277<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_35<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD5 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_277<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_36<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD6 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_278<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_277<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_38<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD7 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_278<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_193<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND2  AD8 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_245<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND4  AD9 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_279<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_277<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>D3<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_41<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD10 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_42<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD11 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>D3<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_45<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND4  AD12 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_279<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_277<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_241<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD13 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>D3<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_48<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD14 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_279<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>D3<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_49<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND3  AD15 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_279<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_254<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND4  AD16 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_278<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_51<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND4  AD17 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_277<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>D3<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_53<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND4  AD18 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_278<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>D3<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_262<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND4  AD19 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_279<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_278<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_267<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AND4  AD20 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_277<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_278<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_261<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR2  XLXI_1 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>LE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_16<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR2  XLXI_2 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>LE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_17<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR2  XLXI_3 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>LE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_18<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR2  XLXI_4 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>LE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_19<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR2  XLXI_5 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>LE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_20<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR2  XLXI_6 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>LE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_21<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR2  XLXI_8 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>LE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_22<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR3  XLXI_15 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_31<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_32<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_64<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_16<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR3  XLXI_16 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_38<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_193<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_245<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_18<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR3  XLXI_17 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_45<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_241<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_49<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_20<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR4  XLXI_18 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_34<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_35<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_36<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>XLXN_262<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_17<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR4  XLXI_19 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_41<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_42<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_267<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>XLXN_261<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_19<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR4  XLXI_20 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_48<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_49<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_254<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>XLXN_51<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_21<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OR4  XLXI_21 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I0</span><span class="token punctuation">(</span>XLXN_53<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I1</span><span class="token punctuation">(</span>XLXN_262<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I2</span><span class="token punctuation">(</span>XLXN_267<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">I3</span><span class="token punctuation">(</span>XLXN_261<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_22<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    INV  XLXI_23 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    INV  XLXI_91 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I</span><span class="token punctuation">(</span>D3<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_274<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    INV  XLXI_92 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I</span><span class="token punctuation">(</span>D2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_277<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    INV  XLXI_102 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I</span><span class="token punctuation">(</span>D1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_278<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    INV  XLXI_103 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">I</span><span class="token punctuation">(</span>D0<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">O</span><span class="token punctuation">(</span>XLXN_279<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span>    <span class="token comment" spellcheck="true">//MyMC14495 end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、去抖动模块"><a href="#八、去抖动模块" class="headerlink" title="八、去抖动模块"></a>八、去抖动模块</h3><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">pbdebounce</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token keyword">wire</span> clk_1ms<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token keyword">wire</span> button<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> pbreg        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pbshift<span class="token punctuation">;</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        pbshift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk_1ms<span class="token punctuation">)</span><span class="token keyword">begin</span>    pbshift <span class="token operator">=</span> pbshift <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    pbshift<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>button<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pbshift<span class="token operator">==</span><span class="token number">8'b0</span><span class="token punctuation">)</span>    pbreg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pbshift<span class="token operator">==</span><span class="token number">8'hff</span><span class="token punctuation">)</span>     pbreg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">end</span> <span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、分频器模块"><a href="#九、分频器模块" class="headerlink" title="九、分频器模块"></a>九、分频器模块</h3><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">clkdiv</span><span class="token punctuation">(</span><span class="token keyword">input</span> <span class="token keyword">wire</span> clk<span class="token punctuation">,</span>        <span class="token keyword">input</span> <span class="token keyword">wire</span> rst<span class="token punctuation">,</span>        <span class="token keyword">output</span> <span class="token keyword">reg</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> clkdiv        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//clock divider</span>      <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>rst<span class="token punctuation">)</span> clkdiv <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">else</span> clkdiv <span class="token operator">&lt;=</span> clkdiv <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十、随机数模块"><a href="#十、随机数模块" class="headerlink" title="十、随机数模块"></a>十、随机数模块</h3><pre class="line-numbers language-Verilog"><code class="language-Verilog">module Random(    input clk,    output wire [3:0]random    );    reg [31:0]rand;    assign random =  rand[3:0] % 6 + 1;     initial begin        rand <= 0;    end    always @(posedge clk) begin         rand <= rand + 1;    endendmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十一、BCD模块"><a href="#十一、BCD模块" class="headerlink" title="十一、BCD模块"></a>十一、BCD模块</h3><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">BCD_20</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>binary<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>bcd    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d1<span class="token punctuation">;</span>        <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d2<span class="token punctuation">;</span>        <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d3<span class="token punctuation">;</span>        <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d4<span class="token punctuation">;</span>        <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d5<span class="token punctuation">;</span>        <span class="token keyword">assign</span> d1 <span class="token operator">=</span> binary <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> d2 <span class="token operator">=</span> <span class="token punctuation">(</span>binary <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">assign</span> d3 <span class="token operator">=</span> <span class="token punctuation">(</span>binary <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">assign</span> d4 <span class="token operator">=</span> <span class="token punctuation">(</span>binary <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">assign</span> d5 <span class="token operator">=</span> <span class="token punctuation">(</span>binary <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">assign</span> bcd <span class="token operator">=</span> <span class="token operator">{</span> d5 <span class="token punctuation">,</span> d4 <span class="token punctuation">,</span> d3 <span class="token punctuation">,</span> d2 <span class="token punctuation">,</span> d1 <span class="token operator">}</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">BCD_8</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>binary<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>bcd    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d1<span class="token punctuation">;</span>        <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d2<span class="token punctuation">;</span>        <span class="token keyword">assign</span> d1 <span class="token operator">=</span> binary <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> d2 <span class="token operator">=</span> binary <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">assign</span> bcd <span class="token operator">=</span> <span class="token operator">{</span> d2 <span class="token punctuation">,</span> d1 <span class="token operator">}</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十二、XDC引脚文件"><a href="#十二、XDC引脚文件" class="headerlink" title="十二、XDC引脚文件"></a>十二、XDC引脚文件</h3><pre class="line-numbers language-Verilog"><code class="language-Verilog">set_property PACKAGE_PIN AC18 [get_ports clk]set_property IOSTANDARD LVCMOS18 [get_ports clk]set_property PACKAGE_PIN AA10 [get_ports {reset}]set_property IOSTANDARD LVCMOS15 [get_ports {reset}]set_property PACKAGE_PIN V18 [get_ports {dice_in}]set_property IOSTANDARD LVCMOS18 [get_ports {dice_in}]set_property PACKAGE_PIN V19 [get_ports {yes_in}]set_property IOSTANDARD LVCMOS18 [get_ports {yes_in}]set_property PACKAGE_PIN V14 [get_ports {no_in}]set_property IOSTANDARD LVCMOS18 [get_ports {no_in}]set_property PACKAGE_PIN AF10 [get_ports {sw_input}]set_property IOSTANDARD LVCMOS15 [get_ports {sw_input}]set_property PACKAGE_PIN W16 [get_ports keypad]set_property IOSTANDARD LVCMOS18 [get_ports keypad]set_property PACKAGE_PIN N18 [get_ports ps2_data]set_property IOSTANDARD LVCMOS33 [get_ports ps2_data]set_property PULLUP true [get_ports ps2_data]set_property PACKAGE_PIN M19 [get_ports ps2_clk]set_property IOSTANDARD LVCMOS33 [get_ports ps2_clk]set_property PULLUP true [get_ports ps2_clk]set_property PACKAGE_PIN T20 [get_ports {b[0]}]set_property IOSTANDARD LVCMOS33 [get_ports {b[0]}]set_property SLEW FAST [get_ports {b[0]}]set_property PACKAGE_PIN R20 [get_ports {b[1]}]set_property IOSTANDARD LVCMOS33 [get_ports {b[1]}]set_property SLEW FAST [get_ports {b[1]}]set_property PACKAGE_PIN T22 [get_ports {b[2]}]set_property IOSTANDARD LVCMOS33 [get_ports {b[2]}]set_property SLEW FAST [get_ports {b[2]}]set_property PACKAGE_PIN T23 [get_ports {b[3]}]set_property IOSTANDARD LVCMOS33 [get_ports {b[3]}]set_property SLEW FAST [get_ports {b[3]}]set_property PACKAGE_PIN R22 [get_ports {g[0]}]set_property IOSTANDARD LVCMOS33 [get_ports {g[0]}]set_property SLEW FAST [get_ports {g[0]}]set_property PACKAGE_PIN R23 [get_ports {g[1]}]set_property IOSTANDARD LVCMOS33 [get_ports {g[1]}]set_property SLEW FAST [get_ports {g[1]}]set_property PACKAGE_PIN T24 [get_ports {g[2]}]set_property IOSTANDARD LVCMOS33 [get_ports {g[2]}]set_property SLEW FAST [get_ports {g[2]}]set_property PACKAGE_PIN T25 [get_ports {g[3]}]set_property IOSTANDARD LVCMOS33 [get_ports {g[3]}]set_property SLEW FAST [get_ports {g[3]}]set_property PACKAGE_PIN N21 [get_ports {r[0]}]set_property IOSTANDARD LVCMOS33 [get_ports {r[0]}]set_property SLEW FAST [get_ports {r[0]}]set_property PACKAGE_PIN N22 [get_ports {r[1]}]set_property IOSTANDARD LVCMOS33 [get_ports {r[1]}]set_property SLEW FAST [get_ports {r[1]}]set_property PACKAGE_PIN R21 [get_ports {r[2]}]set_property IOSTANDARD LVCMOS33 [get_ports {r[2]}]set_property SLEW FAST [get_ports {r[2]}]set_property PACKAGE_PIN P21 [get_ports {r[3]}]set_property IOSTANDARD LVCMOS33 [get_ports {r[3]}]set_property SLEW FAST [get_ports {r[3]}]set_property PACKAGE_PIN M22 [get_ports hs]set_property IOSTANDARD LVCMOS33 [get_ports hs]set_property SLEW FAST [get_ports hs]set_property PACKAGE_PIN M21 [get_ports vs]set_property IOSTANDARD LVCMOS33 [get_ports vs]set_property SLEW FAST [get_ports vs]set_property PACKAGE_PIN AB22 [get_ports {ArduinoSegment[0]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoSegment[0]}]set_property PACKAGE_PIN AD24 [get_ports {ArduinoSegment[1]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoSegment[1]}]set_property PACKAGE_PIN AD23 [get_ports {ArduinoSegment[2]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoSegment[2]}]set_property PACKAGE_PIN Y21 [get_ports {ArduinoSegment[3]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoSegment[3]}]set_property PACKAGE_PIN W20 [get_ports {ArduinoSegment[4]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoSegment[4]}]set_property PACKAGE_PIN AC24 [get_ports {ArduinoSegment[5]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoSegment[5]}]set_property PACKAGE_PIN AC23 [get_ports {ArduinoSegment[6]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoSegment[6]}]set_property PACKAGE_PIN AA22 [get_ports {ArduinoSegment[7]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoSegment[7]}]set_property PACKAGE_PIN AD21 [get_ports {ArduinoAN[0]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoAN[0]}]set_property PACKAGE_PIN AC21 [get_ports {ArduinoAN[1]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoAN[1]}]set_property PACKAGE_PIN AB21 [get_ports {ArduinoAN[2]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoAN[2]}]set_property PACKAGE_PIN AC22 [get_ports {ArduinoAN[3]}]set_property IOSTANDARD LVCMOS33 [get_ports {ArduinoAN[3]}]set_property PACKAGE_PIN M24 [get_ports S_CLK]set_property IOSTANDARD LVCMOS33 [get_ports S_CLK]set_property PACKAGE_PIN M20 [get_ports S_CLR]set_property IOSTANDARD LVCMOS33 [get_ports S_CLR]set_property PACKAGE_PIN L24 [get_ports S_DT]set_property IOSTANDARD LVCMOS33 [get_ports S_DT]set_property PACKAGE_PIN R18 [get_ports S_EN]set_property IOSTANDARD LVCMOS33 [get_ports S_EN]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Verilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> 数字逻辑 </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS-32汇编学习</title>
      <link href="/article/81c0826.html"/>
      <url>/article/81c0826.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>MIPS是一种很流行的Risc处理器，但现在已经是2020年了，我还是觉得学习MIPS-32汇编是一种浪费时间的行为，我更想多拿时间去学一学IA32、IA64。但是ZJU机组就是教的这种汇编，所以我也没办法。本文的主要内容均取自《Computer Organization and Design: the Hardware/Software Interface Third Edition》，话说这书都出到第5版了，ZJU还在用第3版，无力吐槽。</p><h1 id="MIPS-32指令格式"><a href="#MIPS-32指令格式" class="headerlink" title="MIPS-32指令格式"></a>MIPS-32指令格式</h1><p>MIPS-32的指令长度都是32位，分为三种格式：</p><p><strong>R型（算数指令）</strong></p><table><thead><tr><th>op</th><th>rs</th><th>rt</th><th>rd</th><th>shamt</th><th>funct</th></tr></thead><tbody><tr><td>6</td><td>5</td><td>5</td><td>5</td><td>5</td><td>6</td></tr><tr><td>操作码</td><td>第一个操作数</td><td>第二个操作数</td><td>目的寄存器</td><td>偏移量</td><td>函数</td></tr></tbody></table><p><strong>I型（立即数、分支、传输指令）</strong></p><table><thead><tr><th>op</th><th>rs</th><th>rt</th><th>constant or address</th></tr></thead><tbody><tr><td>6</td><td>5</td><td>5</td><td>16</td></tr><tr><td>操作码</td><td>操作数</td><td>目的寄存器</td><td>立即数（常数）或地址</td></tr></tbody></table><p><strong>J型（跳转指令）</strong></p><table><thead><tr><th>op</th><th>address</th></tr></thead><tbody><tr><td>6</td><td>26</td></tr><tr><td>操作码</td><td>指令地址</td></tr></tbody></table><p>指令格式由第一个字段op的值来区分。</p><h1 id="MIPS-32寄存器"><a href="#MIPS-32寄存器" class="headerlink" title="MIPS-32寄存器"></a>MIPS-32寄存器</h1><p>MIPS-32一共有32个寄存器，下面是MIPS-32的寄存器规范：</p><table><thead><tr><th>名称</th><th>寄存器号</th><th>用途</th></tr></thead><tbody><tr><td>$zero</td><td>0</td><td>常数0</td></tr><tr><td>$at</td><td>1</td><td>编译器保留，实现伪指令</td></tr><tr><td>$v0~$v1</td><td>2 ~ 3</td><td>结果值和表达式求值</td></tr><tr><td>$a0~$a3</td><td>4 ~ 7</td><td>参数</td></tr><tr><td>$t0~$t7</td><td>8 ~ 15</td><td>临时变量</td></tr><tr><td>$s0~$s7</td><td>16 ~ 23</td><td>需要保存的</td></tr><tr><td>$t8~$t9</td><td>24 ~ 25</td><td>也是临时变量</td></tr><tr><td>$k0~$k1</td><td>26 ~ 27</td><td>异常处理</td></tr><tr><td>$gp</td><td>28</td><td>全局指针</td></tr><tr><td>$sp</td><td>29</td><td>栈指针</td></tr><tr><td>$fp</td><td>30</td><td>帧指针</td></tr><tr><td>$ra</td><td>31</td><td>返回地址</td></tr></tbody></table><h1 id="MIPS-32汇编语言"><a href="#MIPS-32汇编语言" class="headerlink" title="MIPS-32汇编语言"></a>MIPS-32汇编语言</h1><p>在本书第二章中，一共介绍了24条指令，下面是这些指令的含义：</p><table><thead><tr><th>类别</th><th>格式</th><th>指令</th><th>示例</th><th>语义</th></tr></thead><tbody><tr><td><strong>算数运算</strong></td><td>R</td><td>加</td><td>add $s1, $s2, $s3</td><td>$s1 = $s2+ $s3</td></tr><tr><td><strong>算数运算</strong></td><td>R</td><td>减</td><td>sub $s1, $s2, $s3</td><td>$s1 = $s2 - $s3</td></tr><tr><td><strong>算数运算</strong></td><td>I</td><td>立即数加</td><td>addi $s1, $s2, 100</td><td>$s1 = $s2 + 100</td></tr><tr><td><strong>数据传输</strong></td><td>I</td><td>取字</td><td>lw $s1, 100( $s2)</td><td>$s1 = Memory[$s2 + 100]</td></tr><tr><td><strong>数据传输</strong></td><td>I</td><td>存字</td><td>sw $s1, 100( $s2)</td><td>Memory[$s2 + 100] = $s1</td></tr><tr><td><strong>数据传输</strong></td><td>I</td><td>取半字</td><td>lh $s1, 100( $s2)</td><td>$s1 = Memory[$s2 + 100]</td></tr><tr><td><strong>数据传输</strong></td><td>I</td><td>存半字</td><td>sh $s1, 100( $s2)</td><td>Memory[$s2 + 100] = $s1</td></tr><tr><td><strong>数据传输</strong></td><td>I</td><td>取字节</td><td>lb $s1, 100( $s2)</td><td>$s1 = Memory[$s2 + 100]</td></tr><tr><td><strong>数据传输</strong></td><td>I</td><td>存字节</td><td>sb $s1, 100( $s2)</td><td>Memory[$s2 + 100] = $s1</td></tr><tr><td><strong>数据传输</strong></td><td>I</td><td>立即数高位取</td><td>lui $s1, 100</td><td>$s1 = 100 * 2^16</td></tr><tr><td><strong>逻辑指令</strong></td><td>R</td><td>与</td><td>and $s1, $s2, $s3</td><td>$s1 = $s2 &amp; $s3</td></tr><tr><td><strong>逻辑指令</strong></td><td>R</td><td>或</td><td>or $s1, $s2, $s3</td><td>$s1 = $s2 | $s3</td></tr><tr><td><strong>逻辑指令</strong></td><td>R</td><td>或非</td><td>nor $s1, $s2, $s3</td><td>$s1 = ~($s2 | $s3)</td></tr><tr><td><strong>逻辑指令</strong></td><td>I</td><td>立即数与</td><td>andi $s1, $s2, 100</td><td>$s1 = $s2 &amp; 100</td></tr><tr><td><strong>逻辑指令</strong></td><td>I</td><td>立即数或</td><td>ori $s1, $s2, 100</td><td>$s1 = $s2 | 100</td></tr><tr><td><strong>逻辑指令</strong></td><td>R</td><td>逻辑左移</td><td>sll $s1, $s2, 10</td><td>$s1 = $s2 &lt;&lt; 10</td></tr><tr><td><strong>逻辑指令</strong></td><td>R</td><td>逻辑右移</td><td>srl $s1, $s2, 10</td><td>$s1 = $s2 &gt;&gt; 10</td></tr><tr><td><strong>条件分支</strong></td><td>I</td><td>相等转移</td><td>beq $s1, $s2, 25</td><td>如果相等，go to 25</td></tr><tr><td><strong>条件分支</strong></td><td>I</td><td>不等转移</td><td>bne $s1, $s2, 25</td><td>如果不等， go to 25</td></tr><tr><td><strong>条件分支</strong></td><td>R</td><td>小于置位</td><td>slt $s1, $s2, $s3</td><td>小于 把 $s1置1 不然把 $s1置0</td></tr><tr><td><strong>条件分支</strong></td><td>I</td><td>立即数小于置位</td><td>slti $s1, $s2, 100</td><td>小于 把 $s1置1 不然把 $s1置0</td></tr><tr><td><strong>无条件跳转</strong></td><td>J</td><td>跳转</td><td>j 2500</td><td>go to 10000</td></tr><tr><td><strong>无条件跳转</strong></td><td>R</td><td>跳转寄存器</td><td>jr $ra</td><td>go to $ra</td></tr><tr><td><strong>无条件跳转</strong></td><td>J</td><td>跳转并连接</td><td>jal 2500</td><td>$ra = PC + 4; go to 10000</td></tr></tbody></table><h1 id="MIPS-32伪指令"><a href="#MIPS-32伪指令" class="headerlink" title="MIPS-32伪指令"></a>MIPS-32伪指令</h1><p>MIPS编译器除了MIPS支持MIPS体系结构下的指令外，还支持一些伪指令，下面是目前我学到的：</p><table><thead><tr><th>伪指令</th><th>名称</th><th>格式</th></tr></thead><tbody><tr><td>传送</td><td>move</td><td>R</td></tr><tr><td>乘</td><td>mult</td><td>R</td></tr><tr><td>立即数乘</td><td>multi</td><td>I</td></tr><tr><td>立即数取</td><td>li</td><td>I</td></tr><tr><td>小于转移</td><td>blt</td><td>I</td></tr><tr><td>小于等于转移</td><td>ble</td><td>I</td></tr><tr><td>大于转移</td><td>bgt</td><td>I</td></tr><tr><td>大于等于转移</td><td>bge</td><td>I</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIPS </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch Kde 安装Deepin-QQ</title>
      <link href="/article/e1a9c211.html"/>
      <url>/article/e1a9c211.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>Arch是真的好用！用了这么多Linux发行版，Arch是最能满足需求的，强烈推荐各位体验！不过话说在前面，Arch的坑也是真的很多，要踩好久才能适应。</p><h1 id="KDE下的QQ问题"><a href="#KDE下的QQ问题" class="headerlink" title="KDE下的QQ问题"></a>KDE下的QQ问题</h1><p>QQ是一个很重要的应用，但是无奈腾讯官方的Linux-QQ体验真的是太差了，不过好在有Wine这一神器，以及deepin公司的大力支持，我们可以在Arch上正常使用QQ。安装deepin-QQ：</p><pre class="line-numbers language-bash"><code class="language-bash">yay -S deepin.com.qq.im<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你是GNOME，这时候应该已经可以运行QQ了，但是由于我的桌面系统是KDE，不是GNOME，所以对Deepinqq的支持不好，无法正常打开。</p><p>网络上的解决方案多数是装一个gnome-settings-daemon，然后设置他开机运行，但是这样的话，就会使得其他的软件缩放失效（也可能是我的主题原因），我搜索了很长时间，最后自己发现了一种解决方案：使用xsettingsd代替gnome-settings-daemon。</p><pre class="line-numbers language-bash"><code class="language-bash">yay -S xsettingsd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>xsettingsd有自己的github，里面有他的详细设置，他是一个轻量化的工具，Archwiki上也有一些信息，具体可以自己查查。只要不修改xsettingsd的DPI就不会影响其他的程序的缩放。</p><p>安装好他后，可以考虑把他设置为开机启动，或者右键deepinqq的快捷方式，找到deepinqq的运行脚本“run.sh”</p><p>在脚本开始加上：</p><pre class="line-numbers language-bash"><code class="language-bash">xsettingsd    <span class="token punctuation">(</span>或者xsettingsd<span class="token operator">&amp;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以正常运行QQ了，但是QQ的缩放还不是正常的，我们需要手动运行一下xsettingsd，在终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">xsettingsd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后Ctrl+Alt+T开一个新的终端，输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">env</span> WINEPREFIX<span class="token operator">=</span><span class="token string">"<span class="token variable">$HOME</span>/.deepinwine/Deepin-QQ"</span> /usr/bin/deepin-wine winecfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就打开了winecfg</p><p>调节graphics下的Dpi数值 96对应100% 144对应150% 192对应200%</p><p>按照自己的需求调整就可以了。</p><p>至此，你就可以在Arch上快乐享受QQ了！</p>]]></content>
      
      
      <categories>
          
          <category> Arch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch </tag>
            
            <tag> Deepin-QQ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
